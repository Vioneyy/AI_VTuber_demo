"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Whisper.cpp STT ‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡πà‡∏≠‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò, ‡∏†‡∏≤‡∏©‡∏≤,
‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ GPU offload (-ngl) ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  1) ‡πÄ‡∏õ‡∏¥‡∏î venv
     .\.venv\Scripts\Activate.ps1

  2) ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
     python scripts\test_stt_whispercpp.py

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
- ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏û‡∏≤‡∏ò‡∏î‡πâ‡∏ß‡∏¢ ENV `TEST_WAV_PATH`
- ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `ref_audio.wav` ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå beep ‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å CLI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
"""

import os
import sys
from pathlib import Path

try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

def make_beep_wav(path: Path, duration_sec: float = 1.0, freq: float = 440.0):
    import wave
    import numpy as np
    sample_rate = 16000
    t = np.linspace(0, duration_sec, int(sample_rate * duration_sec), endpoint=False)
    x = (0.2 * np.sin(2 * np.pi * freq * t)).astype(np.float32)
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int16
    y = (x * 32767.0).clip(-32768, 32767).astype(np.int16)
    with wave.open(str(path), 'wb') as w:
        w.setnchannels(1)
        w.setsampwidth(2)
        w.setframerate(sample_rate)
        w.writeframes(y.tobytes())

def main():
    from src.audio.stt_whispercpp import WhisperCppSTT

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å ENV
    bin_path = os.getenv("WHISPER_CPP_BIN_PATH", "")
    model_path = os.getenv("WHISPER_CPP_MODEL_PATH", "")
    lang = os.getenv("WHISPER_CPP_LANG", "th")
    threads = os.getenv("WHISPER_CPP_THREADS", "")
    ngl = os.getenv("WHISPER_CPP_NGL", "")
    timeout_ms = os.getenv("WHISPER_CPP_TIMEOUT_MS", "")

    print("==== Whisper.cpp Settings ====")
    print(f"WHISPER_CPP_BIN_PATH = {bin_path}")
    print(f"WHISPER_CPP_MODEL_PATH = {model_path}")
    print(f"WHISPER_CPP_LANG = {lang}")
    print(f"WHISPER_CPP_THREADS = {threads}")
    print(f"WHISPER_CPP_NGL = {ngl}")
    print(f"WHISPER_CPP_TIMEOUT_MS = {timeout_ms}")
    print("==============================")

    stt = WhisperCppSTT()

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_wav_env = os.getenv("TEST_WAV_PATH", "")
    candidates = [
        Path(test_wav_env) if test_wav_env else None,
        Path("ref_audio.wav"),
        Path("output/sample_sawasdee.wav")
    ]
    wav_path = None
    for c in candidates:
        if c and c.exists():
            wav_path = c
            break

    if not wav_path:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå beep ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        tmp_dir = Path("output")
        tmp_dir.mkdir(parents=True, exist_ok=True)
        wav_path = tmp_dir / "beep_test.wav"
        make_beep_wav(wav_path)
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå beep ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {wav_path}")

    print(f"üéß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {wav_path}")
    text = stt.transcribe_file(wav_path)

    if text:
        print("‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°:")
        print(text)
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)")

if __name__ == "__main__":
    sys.exit(main())