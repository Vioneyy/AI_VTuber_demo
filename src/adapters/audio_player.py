"""
audio_player.py - Discord Audio Player with Lip Sync
‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‡∏û‡∏£‡πâ‡∏≠‡∏° Lip Sync ‡∏Å‡∏±‡∏ö VTS
"""

import asyncio
import discord
import logging
import wave
import numpy as np
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)


class DiscordAudioPlayer:
    """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord Voice Channel ‡∏û‡∏£‡πâ‡∏≠‡∏° Lip Sync"""
    
    def __init__(self, motion_controller=None):
        self.motion_controller = motion_controller
        self.is_playing = False
        self.current_audio_source = None
    
    async def play_audio_with_lipsync(
        self,
        voice_client: discord.VoiceClient,
        audio_file: str,
        text: str = ""
    ) -> bool:
        """
        ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° Lip Sync
        
        Args:
            voice_client: Discord VoiceClient
            audio_file: path ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            text: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback lip sync)
        
        Returns:
            True = ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False = ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        if not voice_client or not voice_client.is_connected():
            logger.error("‚ùå Voice client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            return False
        
        if not Path(audio_file).exists():
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {audio_file}")
            return False
        
        try:
            self.is_playing = True
            logger.info(f"üéµ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {audio_file}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á audio source
            audio_source = discord.FFmpegPCMAudio(audio_file)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° lip sync task
            lipsync_task = None
            if self.motion_controller:
                lipsync_task = asyncio.create_task(
                    self._lipsync_from_audio(audio_file, text)
                )
            
            # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            voice_client.play(
                audio_source,
                after=lambda e: logger.error(f"Player error: {e}") if e else None
            )
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            while voice_client.is_playing():
                await asyncio.sleep(0.1)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ lip sync ‡πÄ‡∏™‡∏£‡πá‡∏à
            if lipsync_task:
                try:
                    await asyncio.wait_for(lipsync_task, timeout=2.0)
                except asyncio.TimeoutError:
                    lipsync_task.cancel()
            
            # ‡∏õ‡∏¥‡∏î‡∏õ‡∏≤‡∏Å
            if self.motion_controller:
                try:
                    await self.motion_controller.set_parameter_value("MouthOpen", 0.0)
                except Exception:
                    pass
            
            logger.info("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}", exc_info=True)
            return False
        finally:
            self.is_playing = False
    
    async def _lipsync_from_audio(self, audio_file: str, text: str):
        """Lip sync ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå WAV
            with wave.open(audio_file, 'rb') as wav:
                sample_rate = wav.getframerate()
                n_frames = wav.getnframes()
                audio_data = wav.readframes(n_frames)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô numpy array
                audio_array = np.frombuffer(audio_data, dtype=np.int16)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RMS ‡πÅ‡∏ï‡πà‡∏•‡∏∞ chunk
                chunk_size = int(sample_rate * 0.05)  # 50ms chunks
                
                for i in range(0, len(audio_array), chunk_size):
                    chunk = audio_array[i:i+chunk_size]
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume (RMS)
                    rms = np.sqrt(np.mean(chunk.astype(np.float32) ** 2))
                    volume = min(rms / 3000.0, 1.0)  # normalize
                    
                    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏≤‡∏Å
                    mouth_open = max(0.0, min(1.0, volume * 1.5))
                    
                    if self.motion_controller:
                        await self.motion_controller.set_parameter_value(
                            "MouthOpen", mouth_open
                        )
                    
                    # ‡∏£‡∏≠‡∏ï‡∏≤‡∏° chunk duration
                    await asyncio.sleep(chunk_size / sample_rate)
        
        except Exception as e:
            logger.error(f"‚ùå Lip sync error: {e}")
            
            # Fallback: ‡πÉ‡∏ä‡πâ text-based lip sync
            if text and self.motion_controller:
                await self._lipsync_from_text(text)
    
    async def _lipsync_from_text(self, text: str, speaking_rate: float = 10.0):
        """Lip sync ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (fallback)"""
        try:
            vowels = 'aeiou‡πÅ‡∏≠‡∏∞‡∏≤‡∏¥‡∏µ‡∏∂‡∏∑‡∏∏‡∏π‡πÄ‡πÇ‡πÑ‡πÉ‡πÑ‡∏≠‡πá'
            duration = len(text) / speaking_rate
            char_duration = duration / len(text) if len(text) > 0 else 0.1
            
            for char in text:
                if not self.is_playing:
                    break
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏≤‡∏Å
                if char.lower() in vowels or char in '‡∏≤‡∏¥‡∏µ‡∏∂‡∏∑‡∏∏‡∏π':
                    mouth_open = np.random.uniform(0.6, 1.0)
                elif char.isalpha():
                    mouth_open = np.random.uniform(0.3, 0.6)
                else:
                    mouth_open = 0.1
                
                if self.motion_controller:
                    await self.motion_controller.set_parameter_value(
                        "MouthOpen", mouth_open
                    )
                
                await asyncio.sleep(char_duration)
        
        except Exception as e:
            logger.error(f"‚ùå Text-based lip sync error: {e}")
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
        self.is_playing = False