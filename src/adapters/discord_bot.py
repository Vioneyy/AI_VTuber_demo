"""
Discord Bot Adapter
"""
import discord
from discord.ext import commands
import asyncio
import logging
import os
import tempfile
import subprocess
from io import BytesIO

logger = logging.getLogger(__name__)

class DiscordBot(commands.Bot):
    def __init__(self, orchestrator):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True
        
        super().__init__(command_prefix="!", intents=intents)
        
        self.orchestrator = orchestrator
        self.voice_client = None
        self.is_recording = False
        
        self._register_commands()
        
        logger.info("‚úÖ Discord Bot ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

    def _register_commands(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        @self.command(name="join")
        async def join(ctx):
            """‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
            if ctx.author.voice is None:
                await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!")
                return
            
            channel = ctx.author.voice.channel
            
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.move_to(channel)
                await ctx.send(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ {channel.name} ‡πÅ‡∏•‡πâ‡∏ß~")
            else:
                self.voice_client = await channel.connect()
                await ctx.send(f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤ {channel.name} ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!")
            
            logger.info(f"Joined voice channel: {channel.name}")

        @self.command(name="leave")
        async def leave(ctx):
            """‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.disconnect()
                self.voice_client = None
                await ctx.send("üëã ‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢~")
                logger.info("Left voice channel")
            else:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

        @self.command(name="say")
        async def say(ctx, *, text: str):
            """‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            await ctx.send(f"üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î: {text[:50]}...")
            
            try:
                logger.info(f"[SAY] ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {text}")
                audio_bytes = await self._synthesize_speech(text)
                
                if not audio_bytes:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                    return
                
                await self._play_audio_and_lipsync(audio_bytes, ctx)
                
                logger.info("[SAY] ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                
            except Exception as e:
                logger.error(f"Say command error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="ask")
        async def ask(ctx, *, question: str):
            """‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            await ctx.send(f"ü§î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question[:50]}...")
            
            try:
                logger.info(f"[ASK] ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
                answer = self.orchestrator.llm.generate_response(question)
                
                await ctx.send(f"üí° ‡∏ï‡∏≠‡∏ö: {answer}")
                
                audio_bytes = await self._synthesize_speech(answer)
                await self._play_audio_and_lipsync(audio_bytes, ctx)
                
            except Exception as e:
                logger.error(f"Ask command error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="test_voice")
        async def test_voice(ctx, seconds: int = 5):
            """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Voice-to-Voice"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            await ctx.send(f"üéôÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ... ‡πÄ‡∏£‡∏¥‡πà‡∏°!")
            
            try:
                logger.info(f"[TEST_VOICE] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á {seconds}s")
                audio_file = await self._record_voice(seconds)
                
                if not audio_file:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                    return
                
                await ctx.send("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°...")
                
                text = await self._transcribe_audio(audio_file)
                
                if not text:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                    return
                
                await ctx.send(f"üìù ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤: **{text}**")
                
                logger.info(f"[TEST_VOICE] LLM ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î: {text}")
                answer = self.orchestrator.llm.generate_response(text)
                
                await ctx.send(f"üí¨ ‡∏ï‡∏≠‡∏ö: {answer}")
                
                audio_bytes = await self._synthesize_speech(answer)
                await self._play_audio_and_lipsync(audio_bytes, ctx)
                
                logger.info("[TEST_VOICE] ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
                await ctx.send("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                
            except Exception as e:
                logger.error(f"Test voice error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="stt")
        async def stt(ctx, seconds: int = 5):
            """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            await ctx.send(f"üéôÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å {seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            
            try:
                audio_file = await self._record_voice(seconds)
                if audio_file:
                    text = await self._transcribe_audio(audio_file)
                    if text:
                        await ctx.send(f"üìù ‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ: {text}")
                    else:
                        await ctx.send("‚ùå ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    await ctx.send("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                await ctx.send(f"‚ùå Error: {e}")

        @self.command(name="ttsref")
        async def ttsref(ctx, mode: str):
            """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î TTS reference"""
            if mode.lower() not in ["on", "off"]:
                await ctx.send("‚ùå ‡πÉ‡∏ä‡πâ: !ttsref on ‡∏´‡∏£‡∏∑‡∏≠ !ttsref off")
                return
            
            use_ref = (mode.lower() == "on")
            self.orchestrator.tts.set_use_reference(use_ref)
            await ctx.send(f"‚úÖ TTS Reference: {'‡πÄ‡∏õ‡∏¥‡∏î' if use_ref else '‡∏õ‡∏¥‡∏î'}")

        @self.command(name="vtsstatus")
        async def vtsstatus(ctx):
            """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ VTS"""
            vts = self.orchestrator.vts
            status = "üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" if vts.ws and not vts.ws.closed else "üî¥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
            await ctx.send(f"**VTS Status:** {status}")

        @self.command(name="emotion")
        async def emotion(ctx, emo: str):
            """Trigger emotion"""
            await self.orchestrator.motion.trigger_emotion(emo)
            await ctx.send(f"üí´ ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå: {emo}")

        @self.command(name="persona")
        async def persona(ctx, name: str = None):
            """‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å AI"""
            if not name:
                from src.personality.persona import get_available_personas
                personas = get_available_personas()
                await ctx.send(f"üé≠ **Persona ‡∏ó‡∏µ‡πà‡∏°‡∏µ**: {', '.join(personas)}\n‡πÉ‡∏ä‡πâ: `!persona <name>`")
                return
            
            try:
                self.orchestrator.llm.set_persona(name)
                await ctx.send(f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å: **{name}**")
            except Exception as e:
                await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å '{name}' ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `!persona` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠")

    async def _synthesize_speech(self, text: str) -> bytes:
        """‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            self.orchestrator.motion.set_generating(True)

            logger.info(f"üé§ TTS ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {text[:50]}...")
            audio_bytes = self.orchestrator.tts.synthesize(text)

            self.orchestrator.motion.set_generating(False)

            if not audio_bytes:
                logger.error("TTS ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ audio bytes")
                return None

            logger.info(f"‚úÖ TTS ‡πÄ‡∏™‡∏£‡πá‡∏à: {len(audio_bytes)} bytes")
            return audio_bytes

        except Exception as e:
            logger.error(f"Synthesize error: {e}", exc_info=True)
            self.orchestrator.motion.set_generating(False)
            return None

    async def _play_audio_and_lipsync(self, audio_bytes: bytes, ctx):
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord + ‡∏•‡∏¥‡∏õ‡∏ã‡∏¥‡∏á‡∏Å‡πå VTS"""
        if not audio_bytes:
            logger.error("‡πÑ‡∏°‡πà‡∏°‡∏µ audio bytes")
            return
        
        try:
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
                temp_audio.write(audio_bytes)
                temp_path = temp_audio.name
            
            logger.info(f"üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {temp_path}")
            
            lipsync_task = asyncio.create_task(
                self.orchestrator.vts.lipsync_bytes(audio_bytes)
            )
            
            if self.voice_client and self.voice_client.is_connected():
                # ‡πÅ‡∏à‡πâ‡∏á MotionController ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠ bias ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤
                try:
                    self.orchestrator.motion.set_speaking(True)
                except Exception:
                    pass

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ffmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                ffmpeg_ok = True
                try:
                    subprocess.run(["ffmpeg", "-version"], capture_output=True)
                except Exception:
                    ffmpeg_ok = False
                    logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ffmpeg ‡πÉ‡∏ô PATH ‚Äî ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ffmpeg")

                audio_source = discord.FFmpegPCMAudio(
                    temp_path,
                    options="-filter:a 'volume=1.0'"
                )
                
                self.voice_client.play(
                    audio_source,
                    after=lambda e: logger.info(f"‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à: {e}" if e else "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à")
                )
                # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                started = False
                for _ in range(20):
                    if self.voice_client.is_playing():
                        started = True
                        break
                    await asyncio.sleep(0.1)
                if not started:
                    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‚Äî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ffmpeg/‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏≠‡∏ó/‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    try:
                        await ctx.send("‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ffmpeg/‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏≠‡∏ó)")
                    except Exception:
                        pass

                while self.voice_client.is_playing():
                    await asyncio.sleep(0.1)
                
                logger.info("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‡πÄ‡∏™‡∏£‡πá‡∏à")
                # ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î
                try:
                    self.orchestrator.motion.set_speaking(False)
                except Exception:
                    pass
            else:
                logger.warning("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
            
            await lipsync_task
            
            try:
                os.remove(temp_path)
            except:
                pass
                
        except Exception as e:
            logger.error(f"Play audio error: {e}", exc_info=True)

    async def _record_voice(self, duration: int) -> str:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á Discord"""
        try:
            from discord import sinks
            
            output_file = tempfile.mktemp(suffix=".wav")
            
            self.voice_client.start_recording(
                sinks.WaveSink(),
                self._recording_callback,
                output_file
            )
            
            self.is_recording = True
            await asyncio.sleep(duration)
            
            self.voice_client.stop_recording()
            self.is_recording = False
            
            await asyncio.sleep(0.5)
            
            return output_file
            
        except ImportError:
            logger.error("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á py-cord ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö recording: pip install py-cord")
            return None
        except Exception as e:
            logger.error(f"Recording error: {e}", exc_info=True)
            return None

    def _recording_callback(self, sink, output_file):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à"""
        logger.info(f"Recording saved: {output_file}")

    async def _transcribe_audio(self, audio_file: str) -> str:
        """‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ whisper.cpp"""
        try:
            whisper_bin = os.getenv("WHISPER_CPP_BIN_PATH", "whisper.cpp/build/bin/main")
            whisper_model = os.getenv("WHISPER_CPP_MODEL_PATH", "whisper.cpp/models/ggml-base.bin")
            lang = os.getenv("WHISPER_CPP_LANG", "th")
            
            if not os.path.exists(whisper_bin):
                logger.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö whisper.cpp: {whisper_bin}")
                return None
            
            cmd = [
                whisper_bin,
                "-m", whisper_model,
                "-l", lang,
                "-f", audio_file,
                "--no-timestamps"
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                text = result.stdout.strip()
                logger.info(f"‚úÖ STT: {text}")
                return text
            else:
                logger.error(f"Whisper error: {result.stderr}")
                return None
                
        except Exception as e:
            logger.error(f"Transcribe error: {e}", exc_info=True)
            return None

    async def start_bot(self, token: str):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot"""
        try:
            await self.start(token)
        except Exception as e:
            logger.error(f"Discord bot error: {e}", exc_info=True)