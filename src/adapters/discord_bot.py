import discord
from discord.ext import commands
import asyncio
import logging
from typing import Optional
import io

# Import admin + safety systems (support both package and module run modes)
try:
    from core.admin_commands import get_admin_handler
    from core.safety_filter import get_safety_filter
except ModuleNotFoundError:
    from src.core.admin_commands import get_admin_handler
    from src.core.safety_filter import get_safety_filter

logger = logging.getLogger(__name__)

class DiscordBot:
    def __init__(self, token: str, audio_player, queue_manager):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True
        intents.guilds = True
        
        self.bot = commands.Bot(command_prefix='!', intents=intents)
        self.token = token
        self.audio_player = audio_player
        self.queue_manager = queue_manager
        self.voice_client: Optional[discord.VoiceClient] = None
        self.admin_handler = get_admin_handler()
        self.safety_filter = get_safety_filter()
        
        self._setup_events()
        self._setup_commands()

    def _setup_events(self):
        @self.bot.event
        async def on_ready():
            logger.info(f"Discord Bot logged in as {self.bot.user} (id={self.bot.user.id})")
            logger.info("üîÑ Voice reconnect monitor ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

        @self.bot.event
        async def on_voice_state_update(member, before, after):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bot ‡∏ñ‡∏π‡∏Å disconnect
            if member == self.bot.user and after.channel is None:
                logger.warning("‚ö†Ô∏è Bot ‡∏ñ‡∏π‡∏Å disconnect ‡∏à‡∏≤‡∏Å voice channel")
                self.voice_client = None

    def _setup_commands(self):
        @self.bot.command(name='join')
        async def join(ctx):
            """‡πÄ‡∏Ç‡πâ‡∏≤ voice channel"""
            if not ctx.author.voice:
                await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô voice channel ‡∏Å‡πà‡∏≠‡∏ô!")
                return

            channel = ctx.author.voice.channel
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ voice_client ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ disconnect ‡∏Å‡πà‡∏≠‡∏ô
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.disconnect(force=True)
                await asyncio.sleep(0.5)
            
            try:
                logger.info(f"üìû ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {channel.name}...")
                self.voice_client = await channel.connect(timeout=10.0, reconnect=True)
                logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {channel.name}")
                await ctx.send(f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤ {channel.name} ‡πÅ‡∏•‡πâ‡∏ß!")
            except Exception as e:
                logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {e}")
                await ctx.send(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

        @self.bot.command(name='leave')
        async def leave(ctx):
            """‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel"""
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.disconnect(force=True)
                self.voice_client = None
                await ctx.send("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å voice channel ‡πÅ‡∏•‡πâ‡∏ß")
            else:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô voice channel")

        @self.bot.command(name='speak')
        async def speak(ctx, *, message: str):
            """‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ voice channel ‡∏Å‡πà‡∏≠‡∏ô! ‡πÉ‡∏ä‡πâ `!join`")
                return

            await ctx.send(f"üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {message}")
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á queue
            await self.queue_manager.add_message(
                source='discord_text',
                content=message,
                metadata={
                    'voice_client': self.voice_client,
                    'ctx': ctx
                }
            )

        # === Admin commands ===
        @self.bot.command(name='unlock')
        async def unlock(ctx, code: str):
            """‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: !unlock <code> (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner)"""
            await self._run_admin_command(ctx, 'unlock', [code])

        @self.bot.command(name='lock')
        async def lock(ctx):
            """‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner)"""
            await self._run_admin_command(ctx, 'lock', [])

        @self.bot.command(name='status')
        async def status(ctx):
            """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
            await self._run_admin_command(ctx, 'status', [])

        @self.bot.command(name='queue')
        async def queue(ctx):
            """‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
            await self._run_admin_command(ctx, 'queue', [])

        @self.bot.command(name='approve')
        async def approve(ctx, approval_id: str):
            """‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠: !approve <approval_id> (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)"""
            await self._run_admin_command(ctx, 'approve', [approval_id])

        @self.bot.command(name='reject')
        async def reject(ctx, approval_id: str):
            """‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠: !reject <approval_id> (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)"""
            await self._run_admin_command(ctx, 'reject', [approval_id])

        @self.bot.command(name='skip')
        async def skip(ctx):
            """‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)"""
            await self._run_admin_command(ctx, 'skip', [])

    async def play_audio(self, audio_data: bytes, voice_client: discord.VoiceClient):
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord voice channel"""
        if not voice_client or not voice_client.is_connected():
            logger.error("‚ùå Voice client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            return False

        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if voice_client.is_playing():
                logger.info("‚è∏Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô...")
                voice_client.stop()
                await asyncio.sleep(0.3)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á audio source ‡∏à‡∏≤‡∏Å bytes
            audio_source = discord.PCMAudio(io.BytesIO(audio_data))
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            finished = asyncio.Event()
            
            def after_playing(error):
                if error:
                    logger.error(f"‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}")
                else:
                    logger.info("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                finished.set()

            # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            logger.info("üîä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
            voice_client.play(audio_source, after=after_playing)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (timeout 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            try:
                await asyncio.wait_for(finished.wait(), timeout=30.0)
                return True
            except asyncio.TimeoutError:
                logger.error("‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Å‡∏¥‡∏ô timeout")
                voice_client.stop()
                return False

        except Exception as e:
            logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}", exc_info=True)
            return False

    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot"""
        logger.info("üöÄ Starting Discord bot...")
        try:
            await self.bot.start(self.token)
        except Exception as e:
            logger.error(f"‚ùå Discord bot error: {e}")

    async def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î Discord bot"""
        if self.voice_client and self.voice_client.is_connected():
            await self.voice_client.disconnect(force=True)
        await self.bot.close()
        logger.info("‚úÖ Discord bot stopped")

    async def _run_admin_command(self, ctx, command: str, args: list):
        """Helper: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö admin command ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô Discord"""
        try:
            # ‡∏î‡∏∂‡∏á queue manager ‡∏ó‡∏µ‡πà‡∏°‡∏µ get_status (QueueBridge ‡∏°‡∏µ base ‡πÄ‡∏õ‡πá‡∏ô SequentialQueueManager)
            queue_for_status = getattr(self.queue_manager, 'base', self.queue_manager)

            user_id = str(getattr(ctx.author, 'id', ''))
            context = {
                'safety_filter': self.safety_filter,
                'queue_manager': queue_for_status,
            }
            result = await self.admin_handler.handle_command(command, args, user_id, context)
            if result:
                await ctx.send(result)
        except Exception as e:
            logger.error(f"‚ùå Admin command error: {e}", exc_info=True)
            try:
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            except Exception:
                pass