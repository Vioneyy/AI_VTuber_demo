"""
Discord Bot Adapter (Fixed Audio System)
"""
import discord
from discord.ext import commands
import asyncio
import logging
import os
import tempfile
import subprocess
from io import BytesIO
import time

logger = logging.getLogger(__name__)

class DiscordBot(commands.Bot):
    def __init__(self, orchestrator):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True
        
        super().__init__(command_prefix="!", intents=intents)
        
        self.orchestrator = orchestrator
        self.voice_client = None
        self.is_recording = False
        self.current_audio_source = None
        
        self._register_commands()
        
        logger.info("‚úÖ Discord Bot ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

    def _register_commands(self):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        
        @self.command(name="join")
        async def join(ctx):
            """‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
            if ctx.author.voice is None:
                await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô!")
                return
            
            channel = ctx.author.voice.channel
            
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.move_to(channel)
                await ctx.send(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ {channel.name} ‡πÅ‡∏•‡πâ‡∏ß~")
            else:
                try:
                    self.voice_client = await channel.connect()
                    await ctx.send(f"‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤ {channel.name} ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞!")
                    logger.info(f"Joined voice channel: {channel.name}")
                except Exception as e:
                    await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
                    logger.error(f"Join error: {e}")
            
        @self.command(name="leave")
        async def leave(ctx):
            """‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.disconnect()
                self.voice_client = None
                await ctx.send("üëã ‡∏ö‡πä‡∏≤‡∏¢‡∏ö‡∏≤‡∏¢~")
                logger.info("Left voice channel")
            else:
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")

        @self.command(name="say")
        async def say(ctx, *, text: str):
            """‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            if len(text) > 200:
                await ctx.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)")
                return
            
            await ctx.send(f"üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î: {text[:50]}...")
            
            try:
                logger.info(f"[SAY] ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {text}")
                
                # ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                audio_bytes = await self._synthesize_speech(text)
                
                if not audio_bytes:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                    return
                
                # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                success = await self._play_audio(audio_bytes, ctx)
                
                if success:
                    await ctx.send("‚úÖ ‡∏û‡∏π‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
                    logger.info("[SAY] ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
                else:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
                
            except Exception as e:
                logger.error(f"Say command error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="ask")
        async def ask(ctx, *, question: str):
            """‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ AI ‡∏ï‡∏≠‡∏ö"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            if len(question) > 200:
                await ctx.send("‚ùå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)")
                return
            
            await ctx.send(f"ü§î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question[:50]}...")
            
            try:
                logger.info(f"[ASK] ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
                
                # ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ LLM ‡∏ï‡∏≠‡∏ö
                answer = await asyncio.get_event_loop().run_in_executor(
                    None, 
                    self.orchestrator.llm.generate_response, 
                    question
                )
                
                if not answer:
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI")
                    return
                
                await ctx.send(f"üí° ‡∏ï‡∏≠‡∏ö: {answer}")
                
                # ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                audio_bytes = await self._synthesize_speech(answer)
                if audio_bytes:
                    success = await self._play_audio(audio_bytes, ctx)
                    if not success:
                        await ctx.send("‚ö†Ô∏è ‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    await ctx.send("‚ùå ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
            except Exception as e:
                logger.error(f"Ask command error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="test")
        async def test(ctx):
            """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"""
            if not self.voice_client or not self.voice_client.is_connected():
                await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á !join ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞")
                return
            
            await ctx.send("üîä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
            
            try:
                test_text = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
                audio_bytes = await self._synthesize_speech(test_text)
                
                if audio_bytes:
                    success = await self._play_audio(audio_bytes, ctx)
                    if success:
                        await ctx.send("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    else:
                        await ctx.send("‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                else:
                    await ctx.send("‚ùå ‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    
            except Exception as e:
                logger.error(f"Test error: {e}", exc_info=True)
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

        @self.command(name="motion")
        async def motion(ctx):
            """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"""
            try:
                await self.orchestrator.motion.trigger_emotion("happy")
                await ctx.send("üí´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    async def _synthesize_speech(self, text: str) -> bytes:
        """‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            # ‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            self.orchestrator.motion.set_generating(True)

            logger.info(f"üé§ TTS ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {text[:50]}...")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å TTS (‡∏£‡∏±‡∏ô‡πÉ‡∏ô thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å event loop)
            audio_bytes = await asyncio.get_event_loop().run_in_executor(
                None,
                self.orchestrator.tts.synthesize,
                text
            )

            self.orchestrator.motion.set_generating(False)

            if not audio_bytes:
                logger.error("TTS ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ audio bytes")
                return None

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ audio_bytes ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
            if len(audio_bytes) < 100:
                logger.error(f"Audio bytes ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {len(audio_bytes)} bytes")
                return None

            logger.info(f"‚úÖ TTS ‡πÄ‡∏™‡∏£‡πá‡∏à: {len(audio_bytes)} bytes")
            return audio_bytes

        except Exception as e:
            logger.error(f"Synthesize error: {e}", exc_info=True)
            self.orchestrator.motion.set_generating(False)
            return None

    async def _play_audio(self, audio_bytes: bytes, ctx) -> bool:
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord"""
        if not audio_bytes or len(audio_bytes) < 100:
            logger.error("‡πÑ‡∏°‡πà‡∏°‡∏µ audio bytes ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
            return False
        
        temp_path = None
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio:
                temp_audio.write(audio_bytes)
                temp_path = temp_audio.name
            
            logger.info(f"üìÇ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {temp_path} ({len(audio_bytes)} bytes)")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ffmpeg
            if not await self._check_ffmpeg():
                await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ffmpeg ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ffmpeg")
                return False
            
            # ‡πÅ‡∏à‡πâ‡∏á MotionController ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î
            self.orchestrator.motion.set_speaking(True)
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏õ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            lipsync_task = None
            try:
                if self.orchestrator.vts and self.orchestrator.vts._is_connected():
                    self.orchestrator.motion.set_lipsyncing(True)
                    lipsync_task = asyncio.create_task(self.orchestrator.vts.lipsync_bytes(audio_bytes))
            except Exception:
                lipsync_task = None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á audio source
            audio_source = discord.FFmpegPCMAudio(
                temp_path,
                before_options="-loglevel quiet",
                options="-filter:a volume=1.0"
            )
            
            # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            play_success = await self._play_audio_source(audio_source, ctx)
            
            # ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î
            self.orchestrator.motion.set_speaking(False)
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏¥‡∏õ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡∏¥‡∏õ‡∏ã‡∏¥‡∏á‡∏Å‡πå
            if lipsync_task:
                try:
                    await lipsync_task
                except Exception:
                    pass
            try:
                self.orchestrator.motion.set_lipsyncing(False)
            except Exception:
                pass
            
            return play_success
            
        except Exception as e:
            logger.error(f"Play audio error: {e}", exc_info=True)
            self.orchestrator.motion.set_speaking(False)
            return False
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            if temp_path and os.path.exists(temp_path):
                try:
                    os.remove(temp_path)
                except Exception as e:
                    logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {e}")

    async def _check_ffmpeg(self) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ffmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        try:
            result = subprocess.run(
                ["ffmpeg", "-version"], 
                capture_output=True, 
                text=True,
                timeout=5.0
            )
            if result.returncode == 0:
                logger.info("‚úÖ FFmpeg ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return True
            else:
                logger.error("‚ùå FFmpeg ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                return False
        except FileNotFoundError:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö FFmpeg ‡πÉ‡∏ô PATH")
            return False
        except Exception as e:
            logger.error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö FFmpeg ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False

    async def _play_audio_source(self, audio_source, ctx) -> bool:
        """‡πÄ‡∏•‡πà‡∏ô audio source ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ"""
        if not self.voice_client or not self.voice_client.is_connected():
            logger.error("Voice client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
            await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
            return False
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô
            self.voice_client.play(audio_source)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ
            start_time = time.time()
            while not self.voice_client.is_playing():
                if time.time() - start_time > 5.0:
                    logger.error("Timeout ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
                    await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ (timeout)")
                    return False
                await asyncio.sleep(0.1)
            
            logger.info("üîä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß")
            await ctx.send("üîä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏π‡∏î...")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
            while self.voice_client.is_playing():
                await asyncio.sleep(0.1)
            
            logger.info("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return True
            
        except Exception as e:
            logger.error(f"Audio playback error: {e}", exc_info=True)
            await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {e}")
            return False

    async def start_bot(self, token: str):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot"""
        try:
            logger.info("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot...")
            await self.start(token)
        except Exception as e:
            logger.error(f"Discord bot error: {e}", exc_info=True)