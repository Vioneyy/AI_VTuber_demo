"""
VTS Motion Controller - Neuro-sama Style
‚ú® ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤ ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡∏≤‡∏Å
"""
import asyncio
import random
import math
import time
import logging
from typing import Optional, Dict, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class MotionAction:
    """‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏≠‡∏±‡∏ô"""
    name: str
    duration: float
    head_x: float = 0.0
    head_y: float = 0.0
    head_z: float = 0.0
    body_x: float = 0.0
    body_y: float = 0.0
    intensity: float = 1.0

class MotionController:
    def __init__(self, vts_client, config: dict):
        self.vts = vts_client
        self.config = config
        
        self.is_speaking = False
        self.is_generating = False
        self.motion_task = None
        self.should_stop = False
        
        # State
        self.current_head_x = 0.0
        self.current_head_y = 0.0
        self.current_head_z = 0.0
        self.current_body_x = 0.0
        self.current_body_y = 0.0
        
        # Timers
        self.breath_time = 0.0
        self.blink_timer = time.time()
        self.action_timer = time.time()
        self.next_action_time = time.time()
        self.current_action: Optional[MotionAction] = None
        self.action_progress = 0.0
        
        # Config
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏π‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡∏•‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô
        self.smoothing = float(config.get("smoothing", 0.96))
        self.intensity = float(config.get("intensity", 1.0))
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó (dt) ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0.05 (~20 FPS) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
        self.update_dt = float(config.get("update_dt", 0.05))
        # ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö override ‡∏à‡∏≤‡∏Å .env ‡∏ú‡πà‡∏≤‡∏ô config)
        self.breath_speed = float(config.get("VTS_BREATH_SPEED", 0.8))
        self.breath_intensity = float(config.get("VTS_BREATH_INTENSITY", 0.3))
        self.breath_value = 0.0
        # ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
        self.action_duration_scale = float(config.get("action_duration_scale", 1.15))
        self.action_rest_min_sec = float(config.get("action_rest_min_sec", 0.6))
        self.action_rest_max_sec = float(config.get("action_rest_max_sec", 1.2))
        self.idle_hold_prob = float(config.get("idle_hold_prob", 0.35))
        
        # ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Neuro-sama
        self.action_pool = self._create_action_pool()
        # ‡∏õ‡∏£‡∏±‡∏ö duration ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏ó‡πà‡∏≤‡∏ñ‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
        for a in self.action_pool:
            a.duration = max(0.2, a.duration * self.action_duration_scale)
        # ‡∏Å‡∏•‡∏∏‡πà‡∏° idle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bias
        self.idle_actions = [a for a in self.action_pool if a.name.startswith("idle_") or "idle" in a.name]
        
        logger.info(f"‚úÖ Neuro Motion: {len(self.action_pool)} actions, intensity={self.intensity}, duration_scale={self.action_duration_scale}")

    def _create_action_pool(self) -> List[MotionAction]:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏ö‡∏ö Neuro-sama
        üé≠ ‡∏°‡∏µ‡∏ó‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡∏≤‡∏Å
        """
        actions = []
        
        # === 1. Head Tilts (‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏´‡∏±‡∏ß) ===
        actions.extend([
            MotionAction("tilt_right", 1.5, head_z=0.8, intensity=0.8),
            MotionAction("tilt_left", 1.5, head_z=-0.8, intensity=0.8),
            MotionAction("tilt_right_strong", 1.2, head_z=1.2, head_y=0.3, intensity=1.2),
            MotionAction("tilt_left_strong", 1.2, head_z=-1.2, head_y=-0.3, intensity=1.2),
        ])
        
        # === 2. Head Nods (‡∏û‡∏¢‡∏±‡∏Å‡∏´‡∏ô‡πâ‡∏≤/‡∏™‡πà‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤) ===
        actions.extend([
            MotionAction("nod_yes", 1.0, head_y=0.6, intensity=0.9),
            MotionAction("nod_no", 1.2, head_x=0.8, intensity=0.9),
            MotionAction("nod_confused", 1.5, head_x=0.5, head_z=0.4, intensity=0.7),
        ])
        
        # === 3. Look Around (‡∏°‡∏≠‡∏á‡πÑ‡∏õ‡∏£‡∏≠‡∏ö‡πÜ) ===
        actions.extend([
            MotionAction("look_right", 1.8, head_x=1.0, head_y=0.2, intensity=1.0),
            MotionAction("look_left", 1.8, head_x=-1.0, head_y=0.2, intensity=1.0),
            MotionAction("look_up", 1.5, head_y=0.8, intensity=0.8),
            MotionAction("look_down", 1.5, head_y=-0.5, intensity=0.6),
            MotionAction("look_up_right", 2.0, head_x=0.7, head_y=0.6, intensity=0.9),
            MotionAction("look_up_left", 2.0, head_x=-0.7, head_y=0.6, intensity=0.9),
        ])
        
        # === 4. Thinking Poses (‡∏ó‡πà‡∏≤‡∏Ñ‡∏¥‡∏î) ===
        actions.extend([
            MotionAction("thinking_right", 2.5, head_x=0.5, head_z=0.3, head_y=-0.2, intensity=0.7),
            MotionAction("thinking_left", 2.5, head_x=-0.5, head_z=-0.3, head_y=-0.2, intensity=0.7),
            MotionAction("thinking_up", 2.0, head_y=0.4, head_z=0.2, intensity=0.6),
        ])
        
        # === 5. Surprised/Excited (‡∏ï‡∏Å‡πÉ‡∏à/‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô) ===
        actions.extend([
            MotionAction("surprised", 0.8, head_y=0.5, body_y=0.3, intensity=1.5),
            MotionAction("excited_bounce", 1.0, head_y=0.4, body_y=0.5, intensity=1.8),
            MotionAction("shocked", 0.6, head_x=0.3, head_y=0.4, intensity=1.6),
        ])
        
        # === 6. Curious (‡∏™‡∏á‡∏™‡∏±‡∏¢/‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ) ===
        actions.extend([
            MotionAction("curious_tilt", 2.0, head_z=0.6, head_x=0.3, intensity=0.8),
            MotionAction("curious_lean", 2.2, head_x=0.4, body_x=0.3, intensity=0.9),
            MotionAction("peek_right", 1.5, head_x=0.8, body_x=0.4, intensity=1.0),
            MotionAction("peek_left", 1.5, head_x=-0.8, body_x=-0.4, intensity=1.0),
        ])
        
        # === 7. Playful (‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô) ===
        actions.extend([
            MotionAction("playful_wiggle", 1.2, head_z=0.5, body_x=0.2, intensity=1.1),
            MotionAction("cheeky_smile", 1.5, head_z=0.4, head_y=0.2, intensity=0.9),
            MotionAction("teasing", 1.8, head_x=0.5, head_z=-0.3, intensity=1.0),
        ])
        
        # === 8. Confident (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à) ===
        actions.extend([
            MotionAction("confident_up", 2.0, head_y=0.3, body_y=0.2, intensity=0.8),
            MotionAction("proud", 2.5, head_y=0.4, head_z=0.1, intensity=0.9),
        ])
        
        # === 9. Shy/Embarrassed (‡∏≠‡∏≤‡∏¢) ===
        actions.extend([
            MotionAction("shy_down", 2.0, head_y=-0.4, head_z=0.2, intensity=0.6),
            MotionAction("embarrassed", 1.8, head_x=0.3, head_y=-0.3, head_z=0.4, intensity=0.7),
        ])
        
        # === 10. Idle Variations (‡∏ó‡πà‡∏≤‡∏û‡∏±‡∏Å‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢) ===
        actions.extend([
            MotionAction("idle_center", 3.0, head_x=0.0, head_y=0.0, head_z=0.0, intensity=0.5),
            MotionAction("idle_slight_right", 2.5, head_x=0.2, head_z=0.1, intensity=0.5),
            MotionAction("idle_slight_left", 2.5, head_x=-0.2, head_z=-0.1, intensity=0.5),
            MotionAction("idle_relaxed", 3.5, head_y=-0.1, head_z=0.05, intensity=0.4),
        ])
        
        # === 11. Special Actions (‡∏ó‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©) ===
        actions.extend([
            MotionAction("head_shake_fast", 0.8, head_x=0.9, intensity=1.8),
            MotionAction("big_nod", 1.0, head_y=0.8, intensity=1.5),
            MotionAction("lean_forward", 2.0, head_y=-0.3, body_y=-0.2, intensity=1.0),
            MotionAction("lean_back", 2.0, head_y=0.3, body_y=0.2, intensity=1.0),
        ])

        # === 12. Slow Pans & Arcs (‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡πâ‡∏≤ ‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô) ===
        actions.extend([
            MotionAction("pan_left_slow", 2.6, head_x=-0.6, head_y=0.1, intensity=0.7),
            MotionAction("pan_right_slow", 2.6, head_x=0.6, head_y=0.1, intensity=0.7),
            MotionAction("arc_up_left", 2.4, head_x=-0.4, head_y=0.5, intensity=0.7),
            MotionAction("arc_up_right", 2.4, head_x=0.4, head_y=0.5, intensity=0.7),
            MotionAction("arc_down_left", 2.4, head_x=-0.4, head_y=-0.4, intensity=0.6),
            MotionAction("arc_down_right", 2.4, head_x=0.4, head_y=-0.4, intensity=0.6),
        ])

        # === 13. Figure Eight & Circles (‡∏£‡∏π‡∏õ‡πÄ‡∏•‡∏Ç‡πÅ‡∏õ‡∏î/‡∏ß‡∏á‡∏Å‡∏•‡∏°) ===
        actions.extend([
            MotionAction("figure8_small", 3.0, head_x=0.5, head_y=0.4, intensity=0.6),
            MotionAction("figure8_wide", 3.4, head_x=0.7, head_y=0.5, intensity=0.7),
            MotionAction("head_circle_cw", 3.2, head_x=0.5, head_y=0.5, intensity=0.6),
            MotionAction("head_circle_ccw", 3.2, head_x=-0.5, head_y=0.5, intensity=0.6),
        ])

        # === 14. Sways & Bounces (‡πÅ‡∏Å‡∏ß‡πà‡∏á/‡∏¢‡πà‡∏≠) ===
        actions.extend([
            MotionAction("sway_x_soft", 2.4, head_x=0.6, intensity=0.7),
            MotionAction("sway_y_soft", 2.4, head_y=0.6, intensity=0.7),
            MotionAction("sway_z_soft", 2.4, head_z=0.6, intensity=0.7),
            MotionAction("bounce_soft", 2.0, head_y=0.4, body_y=0.4, intensity=0.6),
        ])

        # === 15. Diagonal Tilts & Looks (‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á) ===
        actions.extend([
            MotionAction("tilt_look_up_left", 2.2, head_x=-0.5, head_y=0.4, head_z=0.4, intensity=0.7),
            MotionAction("tilt_look_up_right", 2.2, head_x=0.5, head_y=0.4, head_z=-0.4, intensity=0.7),
            MotionAction("tilt_look_down_left", 2.2, head_x=-0.4, head_y=-0.4, head_z=0.4, intensity=0.6),
            MotionAction("tilt_look_down_right", 2.2, head_x=0.4, head_y=-0.4, head_z=-0.4, intensity=0.6),
        ])

        # === 16. Idle Holds (‡∏ó‡πà‡∏≤‡∏û‡∏±‡∏Å‡∏¢‡∏≤‡∏ß‡πÜ ‡πÄ‡∏ö‡∏≤‡∏°‡∏≤‡∏Å) ===
        actions.extend([
            MotionAction("idle_hold_soft", 3.8, head_x=0.1, head_y=0.05, intensity=0.4),
            MotionAction("idle_hold_focus", 3.6, head_x=0.1, head_y=0.1, intensity=0.45),
        ])
        
        return actions

    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° motion loop"""
        if self.motion_task and not self.motion_task.done():
            logger.warning("Motion loop ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        self.should_stop = False
        self.motion_task = asyncio.create_task(self._motion_loop())
        logger.info("üé¨ Neuro Motion ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

    async def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î motion loop"""
        self.should_stop = True
        if self.motion_task:
            try:
                await asyncio.wait_for(self.motion_task, timeout=2.0)
            except:
                pass
            self.motion_task = None
        logger.info("‚èπÔ∏è Motion loop ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")

    def set_speaking(self, speaking: bool):
        self.is_speaking = speaking

    def set_generating(self, generating: bool):
        self.is_generating = generating

    async def _motion_loop(self):
        """
        Main motion loop - Neuro-sama Style
        ‚ú® ‡∏™‡∏∏‡πà‡∏°‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡∏≤‡∏Å
        """
        logger.info("üé≠ Neuro Motion Loop ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        while not self.should_stop:
            try:
                if not self.vts._is_connected():
                    await asyncio.sleep(1.0)
                    continue
                
                dt = self.update_dt  # ~30 FPS
                self.breath_time += dt
                
                # === ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å ===
                if self.current_action is not None and self.action_progress >= 1.0:
                    self.current_action = None
                    self.action_progress = 0.0
                    self.next_action_time = time.time() + random.uniform(self.action_rest_min_sec, self.action_rest_max_sec)

                if self.current_action is None and time.time() >= self.next_action_time:
                    if random.random() < self.idle_hold_prob and self.idle_actions:
                        self.current_action = random.choice(self.idle_actions)
                        self.action_progress = 0.0
                        self.action_timer = time.time()
                    else:
                        self._pick_random_action()
                
                # === ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ===
                await self._update_action(dt)
                
                # === Breathing + Blinking (‡∏ó‡∏≥‡∏ï‡∏•‡∏≠‡∏î) ===
                await self._update_breathing()
                await self._update_blinking()
                
                await asyncio.sleep(dt)
                
            except Exception as e:
                logger.error(f"Motion error: {e}")
                await asyncio.sleep(0.5)
        
        logger.info("üõë Motion loop ‡∏´‡∏¢‡∏∏‡∏î")

    def _pick_random_action(self):
        """
        ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        üé≤ ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (speaking, generating, idle)
        """
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if self.is_speaking:
            # ‡∏ï‡∏≠‡∏ô‡∏û‡∏π‡∏î: ‡∏ä‡∏≠‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            weights = [
                (a, a.intensity * 1.5) if a.intensity > 1.0 else (a, a.intensity * 0.5)
                for a in self.action_pool
            ]
        elif self.is_generating:
            # ‡∏ï‡∏≠‡∏ô‡πÄ‡∏à‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏ä‡∏≠‡∏ö‡∏ó‡πà‡∏≤‡∏Ñ‡∏¥‡∏î/idle
            weights = [
                (a, 2.0) if "thinking" in a.name or "idle" in a.name else (a, 0.5)
                for a in self.action_pool
            ]
        else:
            # ‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤
            weights = [(a, 1.0) for a in self.action_pool]
        
        # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        actions, probs = zip(*weights)
        total = sum(probs)
        normalized_probs = [p / total for p in probs]
        
        self.current_action = random.choices(actions, weights=normalized_probs)[0]
        self.action_progress = 0.0
        self.action_timer = time.time()
        
        logger.debug(f"üé≠ Action: {self.current_action.name} ({self.current_action.duration}s)")

    async def _update_action(self, dt: float):
        """
        ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        """
        if not self.current_action:
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì progress (0.0 ‚Üí 1.0)
        self.action_progress += dt / self.current_action.duration
        self.action_progress = min(self.action_progress, 1.0)
        
        # Easing function (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•)
        t = self.action_progress
        
        # Ease in-out cubic
        if t < 0.5:
            eased = 4 * t * t * t
        else:
            eased = 1 - pow(-2 * t + 2, 3) / 2
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì target position
        action = self.current_action
        intensity_multiplier = action.intensity * self.intensity
        
        target_head_x = action.head_x * eased * intensity_multiplier
        target_head_y = action.head_y * eased * intensity_multiplier
        target_head_z = action.head_z * eased * intensity_multiplier
        target_body_x = action.body_x * eased * intensity_multiplier
        target_body_y = action.body_y * eased * intensity_multiplier
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° subtle noise (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡πà‡∏á)
        noise_factor = 0.01
        target_head_x += math.sin(self.breath_time * 3.7) * noise_factor
        target_head_y += math.cos(self.breath_time * 2.9) * noise_factor
        target_head_z += math.sin(self.breath_time * 4.1) * noise_factor
        
        # Smooth interpolation
        alpha = 1.0 - self.smoothing
        
        self.current_head_x += (target_head_x - self.current_head_x) * alpha
        self.current_head_y += (target_head_y - self.current_head_y) * alpha
        self.current_head_z += (target_head_z - self.current_head_z) * alpha
        self.current_body_x += (target_body_x - self.current_body_x) * alpha
        self.current_body_y += (target_body_y - self.current_body_y) * alpha
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTS
        await self._apply_parameters()

    async def _apply_parameters(self):
        """‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á VTS"""
        try:
            if not self.vts._is_connected():
                return
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ breathing ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô FacePositionY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
            body_y_with_breath = self.current_body_y + (self.breath_value * 0.5)

            params = {
                "FaceAngleX": self.current_head_x * 30.0,
                "FaceAngleY": self.current_head_y * 30.0,
                "FaceAngleZ": self.current_head_z * 30.0,
                "FacePositionX": self.current_body_x * 10.0,
                "FacePositionY": body_y_with_breath * 5.0,
            }

            # ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö batch ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tick
            await self.vts.inject_parameters_bulk(params)
                
        except:
            pass

    async def _update_breathing(self):
        """Breathing Animation"""
        try:
            if not self.vts._is_connected():
                return
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ breathing ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ _apply_parameters ‡∏£‡∏ß‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
            self.breath_value = (math.sin(self.breath_time * self.breath_speed) + 1.0) * 0.5
            self.breath_value *= self.breath_intensity
            
        except:
            pass

    async def _update_blinking(self):
        """Blinking - ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå"""
        try:
            if not self.vts._is_connected():
                return
            
            now = time.time()
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if self.is_speaking or self.is_generating:
                blink_min = 1.5
                blink_max = 4.0
            else:
                blink_min = 2.0
                blink_max = 6.0
            
            blink_duration = 0.15
            next_blink = self.blink_timer + random.uniform(blink_min, blink_max)
            
            if now >= next_blink:
                # ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡πÅ‡∏ö‡∏ö batch
                await self.vts.inject_parameters_bulk({
                    "EyeOpenLeft": 0.0,
                    "EyeOpenRight": 0.0,
                })
                await asyncio.sleep(blink_duration)
                # ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡πÅ‡∏ö‡∏ö batch
                await self.vts.inject_parameters_bulk({
                    "EyeOpenLeft": 1.0,
                    "EyeOpenRight": 1.0,
                })
                
                self.blink_timer = time.time()
                
        except:
            pass

    async def trigger_emotion(self, emotion: str):
        """Trigger hotkey emotion"""
        try:
            if not self.vts._is_connected():
                return
            
            hotkey_map = {
                "happy": "happy_trigger",
                "sad": "sad_trigger",
                "angry": "angry_trigger",
                "surprised": "surprised_trigger",
                "thinking": "thinking_trigger"
            }
            
            hotkey = hotkey_map.get(emotion.lower())
            if hotkey:
                await self.vts.trigger_hotkey(hotkey)
                logger.info(f"üí´ Emotion: {emotion}")
        except Exception as e:
            logger.error(f"Emotion error: {e}")


def create_motion_controller(vts_client, env_config: dict):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Motion Controller"""
    config = {
        "smoothing": env_config.get("VTS_MOVEMENT_SMOOTHING", "0.75"),
        "intensity": env_config.get("VTS_MOTION_INTENSITY", "1.0"),
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏£‡∏ï‡∏à‡∏≤‡∏Å .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        "update_dt": env_config.get("VTS_UPDATE_DT", None),
        # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô config ‡∏î‡πâ‡∏ß‡∏¢
        "VTS_BREATH_SPEED": env_config.get("VTS_BREATH_SPEED", "0.8"),
        "VTS_BREATH_INTENSITY": env_config.get("VTS_BREATH_INTENSITY", "0.3"),
        # ‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏π‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ó‡πà‡∏≤
        "action_duration_scale": env_config.get("VTS_ACTION_DURATION_SCALE", "1.15"),
        "action_rest_min_sec": env_config.get("VTS_ACTION_REST_MIN_SEC", "0.6"),
        "action_rest_max_sec": env_config.get("VTS_ACTION_REST_MAX_SEC", "1.2"),
        "idle_hold_prob": env_config.get("VTS_IDLE_HOLD_PROB", "0.35"),
    }
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ update_dt ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0.033
    if config["update_dt"] is None:
        del config["update_dt"]
    return MotionController(vts_client, config)