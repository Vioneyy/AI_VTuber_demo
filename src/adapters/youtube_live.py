"""
youtube_live.py - YouTube Live Chat Integration
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: Queue Manager, Safety Filter, ‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
"""

import asyncio
import logging
from typing import Optional, Callable
from pytchat import LiveChat
import time

from src.core.queue_manager import QueuedMessage, MessageSource, get_queue_manager

logger = logging.getLogger(__name__)


class YouTubeLiveAdapter:
    """YouTube Live Chat Adapter"""
    
    def __init__(
        self,
        stream_id: str,
        motion_controller=None
    ):
        self.stream_id = stream_id
        self.motion_controller = motion_controller
        
        # Queue manager
        self.queue_manager = get_queue_manager()
        
        # Chat client
        self.chat: Optional[LiveChat] = None
        self.is_running = False
        self.chat_task: Optional[asyncio.Task] = None
        
        # Last processed message (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥)
        self.last_message_id = None
        self.last_message_time = 0.0
        
        # Message cooldown (‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        self.message_cooldown = 2.0  # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô YouTube Live chat monitoring"""
        if self.is_running:
            logger.warning("YouTube Live adapter ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        try:
            logger.info(f"üé• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô YouTube Live Chat: {self.stream_id}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á LiveChat instance
            self.chat = LiveChat(video_id=self.stream_id)
            
            self.is_running = True
            self.chat_task = asyncio.create_task(self._monitor_chat())
            
            logger.info("‚úÖ YouTube Live Chat ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° YouTube Live Chat ‡πÑ‡∏î‡πâ: {e}", exc_info=True)
            self.is_running = False
    
    async def _monitor_chat(self):
        """Monitor YouTube Live chat"""
        logger.info("üëÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° YouTube Live chat...")
        
        while self.is_running:
            try:
                if not self.chat or not self.chat.is_alive():
                    logger.warning("‚ö†Ô∏è LiveChat ‡πÑ‡∏°‡πà active")
                    await asyncio.sleep(5.0)
                    continue
                
                # ‡∏≠‡πà‡∏≤‡∏ô chat messages
                for chat_item in self.chat.get().sync_items():
                    await self._process_chat_message(chat_item)
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                await asyncio.sleep(1.0)
            
            except asyncio.CancelledError:
                logger.info("YouTube Live chat monitor cancelled")
                break
            except Exception as e:
                logger.error(f"‚ùå Monitor chat error: {e}", exc_info=True)
                await asyncio.sleep(5.0)
    
    async def _process_chat_message(self, chat_item):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• chat message"""
        try:
            message_id = chat_item.id
            author = chat_item.author.name
            message = chat_item.message
            timestamp = chat_item.timestamp / 1000.0  # convert to seconds
            
            # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
            if message_id == self.last_message_id:
                return
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ cooldown (‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            current_time = time.time()
            if current_time - self.last_message_time < self.message_cooldown:
                logger.debug(f"‚è±Ô∏è Cooldown: ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏à‡∏≤‡∏Å {author}")
                return
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏Ç‡πâ‡∏≤‡∏° spam, bot, etc.)
            if self._should_ignore_message(message, author):
                return
            
            logger.info(f"üí¨ [YouTube] {author}: {message}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å last message
            self.last_message_id = message_id
            self.last_message_time = current_time
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß
            queued_message = QueuedMessage(
                text=message,
                source=MessageSource.YOUTUBE_CHAT,
                user=author,
                timestamp=timestamp,
                metadata={
                    "repeat_question": True,  # ‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö
                    "message_id": message_id
                }
            )
            await self.queue_manager.add_message(queued_message)
        
        except Exception as e:
            logger.error(f"‚ùå Process chat message error: {e}", exc_info=True)
    
    def _should_ignore_message(self, message: str, author: str) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        
        Returns:
            True = ‡∏Ç‡πâ‡∏≤‡∏°, False = ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        """
        # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ß‡πà‡∏≤‡∏á
        if not message or message.strip() == "":
            return True
        
        # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô spam)
        if len(message) < 3:
            return True
        
        # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô emoji ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if all(not c.isalnum() for c in message):
            return True
        
        # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå (spam)
        if 'http://' in message.lower() or 'https://' in message.lower():
            return True
        
        # ‡∏Ç‡πâ‡∏≤‡∏° message ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ ‡πÜ (spam)
        # TODO: Implement spam detection
        
        return False
    
    async def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î YouTube Live chat monitoring"""
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î YouTube Live Chat...")
        
        self.is_running = False
        
        if self.chat_task:
            self.chat_task.cancel()
            try:
                await self.chat_task
            except asyncio.CancelledError:
                pass
        
        if self.chat:
            try:
                self.chat.terminate()
            except Exception:
                pass
        
        logger.info("‚úÖ YouTube Live Chat ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")
    
    def get_status(self) -> dict:
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        return {
            "is_running": self.is_running,
            "stream_id": self.stream_id,
            "last_message_time": self.last_message_time,
            "chat_alive": self.chat.is_alive() if self.chat else False
        }


# Factory function
def create_youtube_live_adapter(
    stream_id: str,
    motion_controller=None
) -> Optional[YouTubeLiveAdapter]:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á YouTube Live adapter"""
    if not stream_id:
        logger.warning("‚ö†Ô∏è YouTube Stream ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏")
        return None
    
    try:
        return YouTubeLiveAdapter(
            stream_id=stream_id,
            motion_controller=motion_controller
        )
    except Exception as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á YouTube adapter ‡πÑ‡∏î‡πâ: {e}")
        return None