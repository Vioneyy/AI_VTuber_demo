"""
YouTube Live Adapter
"""
import asyncio
import logging
from typing import Optional
import os

logger = logging.getLogger(__name__)

class YouTubeLiveAdapter:
    def __init__(self, orchestrator, stream_id: Optional[str] = None):
        self.orchestrator = orchestrator
        self.stream_id = stream_id
        self.should_stop = False
        self.task = None
        
        self.mock_mode = os.getenv("YOUTUBE_MOCK_MODE", "false").lower() == "true"
        
        if self.mock_mode:
            logger.info("üß™ YouTube Mock Mode: ‡πÄ‡∏õ‡∏¥‡∏î")
        elif not stream_id:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ YOUTUBE_STREAM_ID ‡πÉ‡∏ô .env")
        else:
            logger.info(f"‚úÖ YouTube Live: Stream ID = {stream_id}")

    async def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó YouTube"""
        if self.task and not self.task.done():
            logger.warning("YouTube adapter ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        self.should_stop = False
        
        if self.mock_mode:
            self.task = asyncio.create_task(self._mock_chat_loop())
            logger.info("üß™ Mock chat loop ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        elif self.stream_id:
            self.task = asyncio.create_task(self._real_chat_loop())
            logger.info("üì∫ YouTube chat loop ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        else:
            logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° YouTube adapter")

    async def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó"""
        self.should_stop = True
        if self.task:
            try:
                await asyncio.wait_for(self.task, timeout=3.0)
            except asyncio.TimeoutError:
                logger.warning("YouTube task timeout")
            self.task = None
        logger.info("‚èπÔ∏è YouTube adapter ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß")

    async def _mock_chat_loop(self):
        """Mock Chat Loop: ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å YouTube"""
        logger.info("üß™ Mock YouTube Chat ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        
        mock_messages = [
            {"author": "TestUser1", "message": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!", "is_question": False},
            {"author": "TestUser2", "message": "‡πÄ‡∏ò‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", "is_question": True},
            {"author": "TestUser3", "message": "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?", "is_question": True},
            {"author": "TestUser4", "message": "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏à‡∏±‡∏á~", "is_question": False},
            {"author": "TestUser5", "message": "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ AI ‡∏´‡∏ô‡πà‡∏≠‡∏¢", "is_question": True},
            {"author": "TestUser6", "message": "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!", "is_question": False},
            {"author": "TestUser7", "message": "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢?", "is_question": True},
        ]
        
        idx = 0
        
        while not self.should_stop:
            try:
                await asyncio.sleep(20)
                
                msg = mock_messages[idx % len(mock_messages)]
                idx += 1
                
                logger.info(f"üß™ [Mock] {msg['author']}: {msg['message']}")
                
                if msg['is_question']:
                    from src.core.scheduler import Message
                    
                    message_obj = Message(
                        priority=5,
                        source="youtube",
                        is_question=True,
                        author=msg['author'],
                        text=msg['message'],
                        channel_id="mock_yt_channel"
                    )
                    
                    await self.orchestrator.scheduler.add_message(message_obj)
                    logger.info(f"üì® [Mock] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß: {msg['message']}")
                else:
                    logger.info(f"‚è≠Ô∏è [Mock] ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
                
            except Exception as e:
                logger.error(f"Mock chat loop error: {e}", exc_info=True)
                await asyncio.sleep(5)
        
        logger.info("üß™ Mock chat loop ‡∏´‡∏¢‡∏∏‡∏î")

    async def _real_chat_loop(self):
        """Real Chat Loop: ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏à‡∏≤‡∏Å YouTube Live ‡∏à‡∏£‡∏¥‡∏á"""
        try:
            import pytchat

            chat = pytchat.create(video_id=self.stream_id)
            logger.info(f"üì∫ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ YouTube Live: {self.stream_id}")
            
            while not self.should_stop and chat.is_alive():
                try:
                    items = chat.get().sync_items()
                    pending_questions = []
                    for c in items:
                        if self.should_stop:
                            break

                        author = c.author.name
                        message = c.message

                        logger.info(f"üí¨ [YT] {author}: {message}")

                        if self._is_question(message):
                            pending_questions.append((author, message))
                        else:
                            logger.debug(f"‚è≠Ô∏è [YT] ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")

                    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                    if pending_questions:
                        from src.core.types import IncomingMessage, MessageSource
                        for author, message in pending_questions:
                            msg_obj = IncomingMessage(
                                priority=5,
                                source=MessageSource.YOUTUBE,
                                is_question=True,
                                author=author,
                                text=message,
                                meta={"channel_id": self.stream_id}
                            )
                            try:
                                await self.orchestrator.scheduler.enqueue(msg_obj)
                            except Exception as e:
                                logger.error(f"enqueue error: {e}", exc_info=True)
                        logger.info(f"üì® [YT] ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß {len(pending_questions)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≠‡∏ö")

                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"Chat parsing error: {e}")
                    await asyncio.sleep(2)
            
            chat.terminate()
            logger.info("üì∫ YouTube chat loop ‡∏´‡∏¢‡∏∏‡∏î")
            
        except ImportError:
            logger.error("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pytchat: pip install pytchat")
        except Exception as e:
            logger.error(f"YouTube chat error: {e}", exc_info=True)

    def _is_question(self, text: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        question_markers = ["?", "‡πÑ‡∏´‡∏°", "‡∏°‡∏±‡πâ‡∏¢", "‡∏´‡∏£‡∏∑‡∏≠", "‡∏≠‡∏∞‡πÑ‡∏£", "‡∏ó‡∏≥‡πÑ‡∏°", "‡∏¢‡∏±‡∏á‡πÑ‡∏á", "‡∏ä‡πà‡∏ß‡∏¢", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"]
        
        text_lower = text.lower()
        
        for marker in question_markers:
            if marker in text_lower:
                return True
        
        return False


def create_youtube_adapter(orchestrator):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á YouTube adapter ‡∏à‡∏≤‡∏Å config"""
    stream_id = os.getenv("YOUTUBE_STREAM_ID")
    return YouTubeLiveAdapter(orchestrator, stream_id)

# Alias ‡πÉ‡∏´‡πâ Orchestrator ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ YouTubeAdapter ‡πÑ‡∏î‡πâ
YouTubeAdapter = YouTubeLiveAdapter