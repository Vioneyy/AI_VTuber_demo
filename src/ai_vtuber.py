"""
ai_vtuber.py - Orchestrator
‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Discord Bot + STT (whisper.cpp) + LLM + TTS ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
"""

import asyncio
import logging
import os
import time
from typing import Optional, Dict

# Imports ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏•
try:
    from core.queue_manager import (
        get_queue_manager,
        SequentialQueueManager,
        QueuedMessage,
        MessageSource,
    )
    from core.response_generator import get_response_generator
    from llm.chatgpt_client import ChatGPTClient
    from personality.personality import PersonalitySystem
    from adapters.tts.tts_factory import create_tts_engine
    from adapters.audio_player import DiscordAudioPlayer
    from audio.stt_whispercpp import WhisperCppSTT
    from adapters.discord_bot import DiscordBot
except ModuleNotFoundError:
    from src.core.queue_manager import (
        get_queue_manager,
        SequentialQueueManager,
        QueuedMessage,
        MessageSource,
    )
    from src.core.response_generator import get_response_generator
    from src.llm.chatgpt_client import ChatGPTClient
    from src.personality.personality import PersonalitySystem
    from src.adapters.tts.tts_factory import create_tts_engine
    from src.adapters.audio_player import DiscordAudioPlayer
    from src.audio.stt_whispercpp import WhisperCppSTT
    from src.adapters.discord_bot import DiscordBot


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


class QueueBridge:
    """
    ‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã queue ‡∏Ç‡∏≠‡∏á DiscordBot (add_message(source, content, metadata))
    ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö SequentialQueueManager (add_message(QueuedMessage))
    """

    def __init__(self, base: SequentialQueueManager):
        self.base = base

    async def add_message(self, *, source: str, content: str, metadata: Optional[Dict] = None):
        # map source ‡πÄ‡∏õ‡πá‡∏ô MessageSource
        src_map = {
            'discord_voice': MessageSource.DISCORD_VOICE,
            'discord_text': MessageSource.DISCORD_TEXT,
            'youtube_chat': MessageSource.YOUTUBE_CHAT,
        }
        src_enum = src_map.get(str(source).lower(), MessageSource.DISCORD_TEXT)

        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å metadata ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        user = 'user'
        try:
            ctx = metadata.get('ctx') if metadata else None
            if ctx and getattr(ctx, 'author', None):
                user = getattr(ctx.author, 'name', 'user')
            elif metadata and 'author' in metadata:
                user = str(metadata['author'])
        except Exception:
            pass

        qmsg = QueuedMessage(
            text=content,
            source=src_enum,
            user=user,
            timestamp=time.time(),
            metadata=metadata or {},
        )
        await self.base.add_message(qmsg)

    def start(self, processor_func):
        self.base.start(processor_func)

    async def stop(self):
        await self.base.stop()


class AIVTuberApp:
    def __init__(self):
        # Discord token
        self.token = os.getenv('DISCORD_TOKEN')
        if not self.token:
            logger.warning('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô environment ‚Äî Discord bot ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')

        # Personality + LLM
        self.personality = PersonalitySystem(persona_name=os.getenv('PERSONA_NAME', 'miko'))
        self.llm_client = ChatGPTClient(personality_system=self.personality)
        self.response_gen = get_response_generator(self.llm_client, self.personality)

        # Queue
        self.queue = get_queue_manager()
        self.queue_bridge = QueueBridge(self.queue)

        # STT + TTS + Audio
        # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏¥‡∏î STT ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ path
        stt_enabled = os.getenv('STT_ENABLED', 'true').lower() != 'false' and os.getenv('DISABLE_STT', 'false').lower() != 'true'
        self.stt = None
        if stt_enabled:
            try:
                self.stt = WhisperCppSTT()
            except Exception as e:
                logger.warning(f'‚ö†Ô∏è STT ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {e}. ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
        self.tts = create_tts_engine('f5_tts_thai')
        self.audio_player = DiscordAudioPlayer()

        # Discord bot
        self.discord_bot: Optional[DiscordBot] = None
        if self.token:
            self.discord_bot = DiscordBot(self.token, self.audio_player, self.queue_bridge)

        # Background voice listen config
        self.auto_listen = (os.getenv('DISCORD_AUTO_VOICE_LISTEN', 'false').lower() == 'true')
        if self.auto_listen and self.stt is None:
            logger.info('‚ÑπÔ∏è ‡∏õ‡∏¥‡∏î auto voice listen ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ STT ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
            self.auto_listen = False
        try:
            self.listen_sec = int(os.getenv('VOICE_LISTEN_SEC', '5'))
        except Exception:
            self.listen_sec = 5

    async def process_message(self, message: QueuedMessage) -> bool:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß"""
        try:
            source = message.source.value
            metadata = message.metadata or {}
            ctx = metadata.get('ctx')
            voice_client = metadata.get('voice_client')

            # 1) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å Discord ‡πÉ‡∏´‡πâ‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
            if message.source == MessageSource.DISCORD_VOICE:
                if self.stt is None:
                    logger.info('üîá STT ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á')
                    if ctx:
                        try:
                            await ctx.send('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ STT ‡πÄ‡∏•‡∏¢‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πâ‡∏≤~ ‡πÉ‡∏ä‡πâ !speak ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢')
                        except Exception:
                            pass
                    return False
                if not voice_client or not voice_client.is_connected():
                    logger.warning('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ voice_client ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')
                    if ctx:
                        try:
                            await ctx.send('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô voice channel ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                        except Exception:
                            pass
                    return False

                logger.info('üéôÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å Discord...')
                transcript = await self.stt.record_and_transcribe(voice_client, duration_sec=self.listen_sec)
                if not transcript:
                    logger.info('ü§î ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≠‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ')
                    if ctx:
                        try:
                            await ctx.send('‡πÄ‡∏≠‡πä‡∏∞~ ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î ‡∏•‡∏≠‡∏á‡∏û‡∏π‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä')
                        except Exception:
                            pass
                    return False
                user_text = transcript
            else:
                # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å !speak)
                user_text = (message.text or '').strip()
                if not user_text:
                    return False

            # 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ LLM + Personality + Safety
            response_text, rejection_reason = await self.response_gen.generate_response(
                user_text,
                user=message.user,
                source=source,
                repeat_question=False,
            )

            if not response_text:
                logger.info(f'üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {rejection_reason}')
                if ctx:
                    try:
                        await ctx.send(str(rejection_reason or '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏∞~'))
                    except Exception:
                        pass
                return False

            # 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á TTS (‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå WAV)
            logger.info('üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á TTS...')
            audio_file = await self.tts.generate(response_text)
            if not audio_file:
                logger.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                if ctx:
                    try:
                        await ctx.send(f'‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡πâ‡∏≤~ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏ï‡πà‡∏â‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: {response_text}')
                    except Exception:
                        pass
                return False

            # 4) ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‡∏û‡∏£‡πâ‡∏≠‡∏° Lip Sync (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô voice channel)
            played = False
            if voice_client and getattr(voice_client, 'is_connected', lambda: False)():
                played = await self.audio_player.play_audio_with_lipsync(voice_client, audio_file, text=response_text)
                if ctx:
                    try:
                        await ctx.send(f'üí¨ {response_text}')
                    except Exception:
                        pass

            # 5) ‡∏™‡∏≥‡∏£‡∏≠‡∏á: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ voice_client ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
            if not played and ctx:
                try:
                    await ctx.send(f'üí¨ {response_text}')
                except Exception:
                    pass

            logger.info('‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')
            return True

        except Exception as e:
            logger.error(f'‚ùå Process message error: {e}', exc_info=True)
            return False

    async def _voice_listen_loop(self):
        """‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å voice channel (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô) ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß"""
        if not self.auto_listen:
            return
        logger.info('üëÇ ‡πÄ‡∏£‡∏¥‡πà‡∏° auto voice listen loop')
        while True:
            try:
                vc = getattr(self.discord_bot, 'voice_client', None) if self.discord_bot else None
                if vc and vc.is_connected():
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (content ‡πÄ‡∏õ‡πá‡∏ô placeholder ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å STT ‡πÉ‡∏ô processor)
                    await self.queue.add_message(QueuedMessage(
                        text='(voice)',
                        source=MessageSource.DISCORD_VOICE,
                        user='voice',
                        timestamp=time.time(),
                        metadata={'voice_client': vc, 'ctx': None},
                    ))
                await asyncio.sleep(max(1, self.listen_sec))
            except asyncio.CancelledError:
                break
            except Exception:
                await asyncio.sleep(2)

    async def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î"""
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° queue processor
        self.queue.start(self.process_message)

        # ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto-listen ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
        bg_tasks = []
        if self.auto_listen:
            bg_tasks.append(asyncio.create_task(self._voice_listen_loop()))

        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token)
        bot_task = None
        if self.discord_bot:
            logger.info('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Discord bot ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á')
            bot_task = asyncio.create_task(self.discord_bot.start())

        try:
            # ‡∏£‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            await asyncio.Event().wait()
        except asyncio.CancelledError:
            pass
        finally:
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
            if bot_task:
                try:
                    await self.discord_bot.stop()
                except Exception:
                    pass
            for t in bg_tasks:
                t.cancel()
            try:
                await self.queue_bridge.stop()
            except Exception:
                pass


if __name__ == '__main__':
    try:
        # ‡πÇ‡∏´‡∏•‡∏î .env ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        try:
            from dotenv import load_dotenv
            load_dotenv()
        except Exception:
            pass

        app = AIVTuberApp()
        asyncio.run(app.run())
    except KeyboardInterrupt:
        pass