import asyncio
import logging
import os
import sys
from pathlib import Path

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

async def process_message(self, message: dict):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• message ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô"""
    source = message['source']
    content = message['content']
    metadata = message.get('metadata', {})
    
    logger.info(f"‚ñ∂Ô∏è Processing:  [{source}] {content}")
    
    try:
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á response
        response_text = await self.response_gen.generate_response(content)
        logger.info(f"üí¨ Response generated: {response_text}")
        
        # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á TTS
        logger.info("üé§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...")
        audio_file = await self.tts.generate(response_text)
        
        if not audio_file:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
            return
        
        logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {audio_file}")
        
        # 3. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        try:
            with open(audio_file, 'rb') as f:
                audio_data = f.read()
            logger.info(f"üìÅ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß: {len(audio_data)} bytes")
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: {e}")
            return
        
        # 4. ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° source
        if source == 'discord_text':
            voice_client = metadata.get('voice_client')
            ctx = metadata.get('ctx')
            
            if voice_client and voice_client.is_connected():
                logger.info("üîä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord...")
                
                # ‡πÅ‡∏õ‡∏•‡∏á audio_data ‡πÄ‡∏õ‡πá‡∏ô PCM format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
                try:
                    import io
                    from pydub import AudioSegment
                    
                    # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    audio = AudioSegment.from_file(io.BytesIO(audio_data))
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PCM format ‡∏ó‡∏µ‡πà Discord ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                    # 48kHz, 16-bit, 2 channels (stereo)
                    audio = audio.set_frame_rate(48000).set_channels(2).set_sample_width(2)
                    
                    # Export ‡πÄ‡∏õ‡πá‡∏ô raw PCM
                    pcm_audio = io.BytesIO()
                    audio.export(pcm_audio, format='s16le', codec='pcm_s16le')
                    pcm_audio.seek(0)
                    
                    # ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô Discord
                    success = await self.discord_bot.play_audio(pcm_audio.read(), voice_client)
                    
                    if success:
                        logger.info("‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        if ctx:
                            await ctx.send(f"‚úÖ **‡∏ï‡∏≠‡∏ö:** {response_text}")
                    else:
                        logger.error("‚ùå ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô Discord ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                        if ctx:
                            await ctx.send(f"‚ö†Ô∏è ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤: {response_text}")
                
                except ImportError:
                    logger.error("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pydub: pip install pydub")
                    if ctx:
                        await ctx.send("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pydub ‡∏Å‡πà‡∏≠‡∏ô")
                except Exception as e:
                    logger.error(f"‚ùå ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", exc_info=True)
                    if ctx:
                        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            else:
                logger.warning("‚ö†Ô∏è Voice client ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                if ctx:
                    await ctx.send("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ voice channel")
        
        else:
            # ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ (local)
            logger.info("üîä ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö local...")
            await self.audio_player.play(audio_file)
        
        # 5. Motion (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        await self.motion_controller.trigger_motion("talking")
        
        logger.info("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except Exception as e:
        logger.error(f"‚ùå Process message error: {e}", exc_info=True)
        raise


# --- Standalone entrypoint ---
def _ensure_project_root_on_path():
    """‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à src ‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    project_root = Path(__file__).resolve().parent.parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))


def _import_run():
    """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô run_vts_demo ‡∏à‡∏≤‡∏Å main ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÅ‡∏•‡∏∞‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"""
    try:
        # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à src
        from src.main import run_vts_demo
        return run_vts_demo
    except ModuleNotFoundError:
        # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå src ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        from main import run_vts_demo
        return run_vts_demo


if __name__ == "__main__":
    _ensure_project_root_on_path()
    run_vts_demo = _import_run()

    import argparse
    parser = argparse.ArgumentParser(description="Run AI VTuber demo standalone")
    parser.add_argument("--duration", type=float, default=25.0, help="‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô motion (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ), 0 = ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á")
    args = parser.parse_args()

    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô AI VTuber demo ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ú‡πà‡∏≤‡∏ô ai_vtuber.py")
    try:
        asyncio.run(run_vts_demo(duration_sec=args.duration))
    except KeyboardInterrupt:
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Ctrl+C)")
    except Exception as e:
        logger.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô: {e}")