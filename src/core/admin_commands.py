"""
admin_commands.py - Admin Command System
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
"""

import logging
import os
from typing import Optional, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class AdminUser:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin user"""
    user_id: str
    username: str
    role: str  # "owner", "moderator"


class AdminCommandHandler:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á admin"""
    
    def __init__(self):
        # ‡πÇ‡∏´‡∏•‡∏î admin IDs ‡∏à‡∏≤‡∏Å .env
        self.owner_ids = self._load_admin_ids("OWNER_IDS")
        self.moderator_ids = self._load_admin_ids("MODERATOR_IDS")
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
        self.commands = {
            "approve": self.cmd_approve,
            "reject": self.cmd_reject,
            "status": self.cmd_status,
            "queue": self.cmd_queue,
            "skip": self.cmd_skip,
            "unlock": self.cmd_unlock,
            "lock": self.cmd_lock,
        }
        
        # Secret unlock code
        self.unlock_code = os.getenv("UNLOCK_CODE", "unlock123")
        self.is_unlocked = False
    
    def _load_admin_ids(self, env_key: str) -> List[str]:
        """‡πÇ‡∏´‡∏•‡∏î admin IDs ‡∏à‡∏≤‡∏Å .env"""
        ids_str = os.getenv(env_key, "")
        if not ids_str:
            return []
        return [id.strip() for id in ids_str.split(",")]
    
    def is_owner(self, user_id: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô owner ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return user_id in self.owner_ids
    
    def is_moderator(self, user_id: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô moderator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return user_id in self.moderator_ids or self.is_owner(user_id)
    
    def is_admin(self, user_id: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô admin (owner ‡∏´‡∏£‡∏∑‡∏≠ moderator)"""
        return self.is_moderator(user_id)
    
    async def handle_command(
        self,
        command: str,
        args: List[str],
        user_id: str,
        context: dict
    ) -> Optional[str]:
        """
        ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á admin
        
        Args:
            command: ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            args: arguments
            user_id: ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            context: context ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (safety_filter, queue_manager, etc.)
        
        Returns:
            response message ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if not self.is_admin(user_id):
            return "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ"
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        if command in self.commands:
            try:
                return await self.commands[command](args, user_id, context)
            except Exception as e:
                logger.error(f"‚ùå Command error: {e}", exc_info=True)
                return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
        else:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}"
    
    async def cmd_approve(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ approval request"""
        if len(args) < 1:
            return "‚ùå ‡πÉ‡∏ä‡πâ: !approve <approval_id>"
        
        approval_id = args[0]
        safety_filter = context.get("safety_filter")
        
        if not safety_filter:
            return "‚ùå Safety filter ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
        
        success = safety_filter.approve_request(approval_id, approved=True)
        if success:
            return f"‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß: {approval_id}"
        else:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö approval ID: {approval_id}"
    
    async def cmd_reject(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò approval request"""
        if len(args) < 1:
            return "‚ùå ‡πÉ‡∏ä‡πâ: !reject <approval_id>"
        
        approval_id = args[0]
        safety_filter = context.get("safety_filter")
        
        if not safety_filter:
            return "‚ùå Safety filter ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
        
        success = safety_filter.approve_request(approval_id, approved=False)
        if success:
            return f"‚úÖ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß: {approval_id}"
        else:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö approval ID: {approval_id}"
    
    async def cmd_status(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        queue_manager = context.get("queue_manager")
        safety_filter = context.get("safety_filter")
        
        status_lines = ["üìä **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö**"]
        
        if queue_manager:
            status = queue_manager.get_status()
            status_lines.extend([
                f"- ‡∏Ñ‡∏¥‡∏ß: {status['queue_size']} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                f"- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {'‚úÖ' if status['is_processing'] else '‚ùå'}",
                f"- ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß: {status['total_processed']} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                f"- Errors: {status['total_errors']}"
            ])
        
        if safety_filter:
            pending = safety_filter.get_pending_approvals()
            status_lines.append(f"- ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: {len(pending)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return "\n".join(status_lines)
    
    async def cmd_queue(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏î‡∏π‡∏Ñ‡∏¥‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        queue_manager = context.get("queue_manager")
        
        if not queue_manager:
            return "‚ùå Queue manager ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
        
        status = queue_manager.get_status()
        
        lines = [
            "üìã **‡∏Ñ‡∏¥‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°**",
            f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {status['queue_size']}",
            f"- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {status.get('current_message', '‡πÑ‡∏°‡πà‡∏°‡∏µ')}"
        ]
        
        return "\n".join(lines)
    
    async def cmd_skip(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        # TODO: Implement skip functionality
        return "‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß"
    
    async def cmd_unlock(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
        if not self.is_owner(user_id):
            return "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        
        if len(args) < 1:
            return "‚ùå ‡πÉ‡∏ä‡πâ: !unlock <code>"
        
        code = args[0]
        if code == self.unlock_code:
            self.is_unlocked = True
            return "üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏î‡πâ"
        else:
            return "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î"
    
    async def cmd_lock(self, args: List[str], user_id: str, context: dict) -> str:
        """‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"""
        if not self.is_owner(user_id):
            return "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        
        self.is_unlocked = False
        return "üîí ‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß! ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
    
    def can_reveal_project_info(self) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return self.is_unlocked


# Singleton
_admin_handler = None

def get_admin_handler() -> AdminCommandHandler:
    """‡∏î‡∏∂‡∏á AdminCommandHandler instance"""
    global _admin_handler
    if _admin_handler is None:
        _admin_handler = AdminCommandHandler()
    return _admin_handler