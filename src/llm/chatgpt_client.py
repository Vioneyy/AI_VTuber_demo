"""
ChatGPT Client with Personality
"""
import os
import openai
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class ChatGPTClient:
    def __init__(self, persona_name: str = "miko"):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ OPENAI_API_KEY ‡πÉ‡∏ä‡πâ LLM ‡πÅ‡∏ö‡∏ö scaffold")
            self.enabled = False
        else:
            openai.api_key = api_key
            self.enabled = True
            logger.info("‚úÖ ChatGPT Client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        self.model = os.getenv("LLM_MODEL", "gpt-4o-mini")
        self.temperature = float(os.getenv("LLM_TEMPERATURE", "0.8"))
        self.max_tokens = int(os.getenv("LLM_MAX_TOKENS", "80"))
        
        from src.personality.persona import get_persona
        self.system_prompt = get_persona(persona_name)
        
        logger.info(f"üé≠ ‡πÉ‡∏ä‡πâ Persona: {persona_name}")

    def generate_response(self, user_message: str, context: Optional[str] = None) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å LLM
        """
        if not self.enabled:
            return self._scaffold_response(user_message)
        
        try:
            messages = [
                {"role": "system", "content": self.system_prompt}
            ]
            
            if context:
                messages.append({"role": "system", "content": f"‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: {context}"})
            
            messages.append({"role": "user", "content": user_message})
            
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=messages,
                temperature=self.temperature,
                max_tokens=self.max_tokens,
                timeout=15
            )
            
            answer = response.choices[0].message.content.strip()
            logger.info(f"üí¨ LLM ‡∏ï‡∏≠‡∏ö: {answer[:50]}...")
            return answer
            
        except Exception as e:
            logger.error(f"‚ùå LLM error: {e}")
            return self._scaffold_response(user_message)
    
    def _scaffold_response(self, message: str) -> str:
        """
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á
        """
        import random
        
        responses = [
            "‡πÄ‡∏≠‡πä‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢~ ‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢?",
            "‡∏≠‡∏∑‡∏°... ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏±‡∏á ‡∏Æ‡πà‡∏≤‡πÜ",
            "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏µ!",
            "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏Ç‡∏≠‡∏Ñ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å~",
            "‡πÄ‡∏Æ‡πâ‡∏¢~ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏≠‡∏Å ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢?",
            "‡∏≠‡∏∞‡∏Æ‡πà‡∏≤ ‡∏â‡∏±‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡∏∏‡∏Å‡∏ô‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ!"
        ]
        
        return random.choice(responses)

    def set_persona(self, persona_name: str):
        """
        ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å
        """
        from src.personality.persona import get_persona
        
        self.system_prompt = get_persona(persona_name)
        logger.info(f"üé≠ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Persona: {persona_name}")