"""
ChatGPT Client with Personality
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å orchestrator ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î generate ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà ResponseGenerator ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö openai>=1.0.0 ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ AsyncOpenAI
"""
import os
import logging
from typing import Optional
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)


class ChatGPTClient:
    def __init__(
        self,
        api_key: Optional[str] = None,
        model: Optional[str] = None,
        personality_system: Optional[object] = None,
        persona_name: Optional[str] = None,
    ):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API key
        key = api_key or os.getenv("OPENAI_API_KEY")
        if not key:
            logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ OPENAI_API_KEY ‡πÉ‡∏ä‡πâ LLM ‡πÅ‡∏ö‡∏ö scaffold")
            self.enabled = False
        else:
            # ‡πÉ‡∏ä‡πâ‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á openai>=1.0.0
            self.client = AsyncOpenAI(api_key=key)
            self.enabled = True
            logger.info("‚úÖ ChatGPT Client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
        self.model = (model or os.getenv("LLM_MODEL", "gpt-4o-mini"))
        self.temperature = float(os.getenv("LLM_TEMPERATURE", "0.8"))
        self.max_tokens = int(os.getenv("LLM_MAX_TOKENS", "80"))

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î system prompt
        if personality_system and hasattr(personality_system, "get_system_prompt"):
            self.system_prompt = personality_system.get_system_prompt()
            logger.info("üé≠ ‡πÉ‡∏ä‡πâ System Prompt ‡∏à‡∏≤‡∏Å PersonalitySystem")
        else:
            from src.personality.persona import get_persona
            name = persona_name or os.getenv("PERSONA_NAME", "miko")
            self.system_prompt = get_persona(name)
            logger.info(f"üé≠ ‡πÉ‡∏ä‡πâ Persona: {name}")

    async def generate(self, user_message: str, system_prompt: Optional[str] = None) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å LLM ‡∏ï‡∏≤‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏ó‡∏µ‡πà ResponseGenerator ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
        """
        if not self.enabled:
            return self._scaffold_response(user_message)

        try:
            messages = [{"role": "system", "content": system_prompt or self.system_prompt}]

            messages.append({"role": "user", "content": user_message})

            # ‡πÉ‡∏ä‡πâ API ‡πÉ‡∏´‡∏°‡πà: client.chat.completions.create (async)
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                temperature=self.temperature,
                max_tokens=self.max_tokens,
            )

            answer = response.choices[0].message.content.strip()
            logger.info(f"üí¨ LLM ‡∏ï‡∏≠‡∏ö: {answer[:50]}...")
            return answer

        except Exception as e:
            logger.error(f"‚ùå LLM error: {e}")
            return self._scaffold_response(user_message)

    def _scaffold_response(self, message: str) -> str:
        """
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á
        """
        import random

        responses = [
            "‡πÄ‡∏≠‡πä‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏•‡∏¢~ ‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢?",
            "‡∏≠‡∏∑‡∏°... ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏±‡∏á ‡∏Æ‡πà‡∏≤‡πÜ",
            "‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏î‡∏µ!",
            "‡πÇ‡∏≠‡πâ‡πÇ‡∏´ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡∏¢ ‡∏Ç‡∏≠‡∏Ñ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å~",
            "‡πÄ‡∏Æ‡πâ‡∏¢~ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πà‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏≠‡∏Å ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢?",
            "‡∏≠‡∏∞‡∏Æ‡πà‡∏≤ ‡∏â‡∏±‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡∏∏‡∏Å‡∏ô‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ!"
        ]

        return random.choice(responses)

    def set_persona(self, persona_name: str):
        """
        ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å
        """
        from src.personality.persona import get_persona

        self.system_prompt = get_persona(persona_name)
        logger.info(f"üé≠ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Persona: {persona_name}")