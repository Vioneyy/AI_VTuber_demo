import asyncio
import logging
import os
from pathlib import Path

try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

try:
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• (python -m src.main) ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
    from adapters.vts.vts_client import VTSClient
except ModuleNotFoundError:
    # ‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ prefix ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à src
    from src.adapters.vts.vts_client import VTSClient
try:
    from core.config import get_settings
except ModuleNotFoundError:
    from src.core.config import get_settings

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


async def run_vts_demo(duration_sec: float = 25.0):
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ settings ‡∏à‡∏≤‡∏Å .env ‡∏ú‡πà‡∏≤‡∏ô Config ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πÇ‡∏°‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    settings = get_settings()
    host = settings.VTS_HOST
    port = settings.VTS_PORT
    plugin_name = settings.VTS_PLUGIN_NAME or os.getenv("VTS_PLUGIN_NAME", "AI VTuber Demo")

    client = VTSClient(plugin_name=plugin_name, plugin_developer="VIoneyy", host=host, port=port, config=settings)

    try:
        ok = await client.connect()
        if not ok:
            logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö VTube Studio ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return

        await client.verify_connection()
        logger.info("üéØ ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: %d", len(client.available_parameters))
        logger.info("üéØ ‡∏Æ‡πá‡∏≠‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: %d", len(client.available_hotkeys))

        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ style profile + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡πá‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        try:
            client.apply_style_profile_from_config()
        except Exception:
            pass

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î)
        if getattr(settings, "VTS_RANDOM_EVENTS_CONTINUOUS", False):
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ neuro-random events (continuous, no time limit)")
            await client.start_neuro_random_events()
            # ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏î‡∏´‡∏¢‡∏∏‡∏î
            run_sec = float(getattr(settings, "VTS_PRESET_DURATION_SEC", 0.0))
            if run_sec <= 0:
                try:
                    # ‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏≠‡∏á
                    while True:
                        await asyncio.sleep(60)
                except asyncio.CancelledError:
                    pass
            else:
                await asyncio.sleep(run_sec)
            await client.stop_neuro_random_events()
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
        if getattr(settings, "VTS_RANDOM_EVENTS_PRESET", False):
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å settings ‡∏´‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
            duration_override = float(getattr(settings, "VTS_PRESET_DURATION_SEC", duration_sec)) or duration_sec
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ neuro-random events preset (fixed duration) ~%.1f ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", duration_override)
            await client.play_neuro_random_events(duration_sec=duration_override)
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå: ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Neuro ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ motion loop
        if getattr(settings, "VTS_SCRIPTED_PRESET", False):
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ scripted Neuro preset (no motion loop) ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ~%.1f ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", duration_sec)
            await client.play_neuro_clip_preset(duration_sec=duration_sec)
            return

        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° motion ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚Äî ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å start_random_motion ‡∏´‡∏£‡∏∑‡∏≠ start_continuous_natural_motion
        logger.info("‚è∏Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° motion ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        # ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡πÇ‡∏°‡∏ó‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ hotkey)
        try:
            import os as _os
            _hk = _os.getenv("VTS_HOTKEY_ON_CONNECT", "happy")
            if _os.getenv("VTS_ENABLE_AUTOHOTKEY", "0") == "1":
                await client.trigger_hotkey_by_name(_hk)
        except Exception:
            pass
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° motion ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏Å‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á
        try:
            import math, time as _time, os as _os
            present = set(client.available_parameters or [])
            # ‡∏´‡∏≤‡∏Å‡∏õ‡∏¥‡∏î motion ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏â‡∏¢ ‡πÜ
            if getattr(settings, "VTS_DISABLE_ALL_MOTION", False):
                logger.info("üîí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (multi-sway/eyes/mouth) ‚Äî VTS_DISABLE_ALL_MOTION=1")
                await asyncio.Event().wait()
                return
            # helper: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á (Input ‡∏Å‡πà‡∏≠‡∏ô Output)
            def pick(*names):
                for nm in names:
                    if nm in present:
                        return nm
                return None
            # ‡∏ä‡πà‡∏≠‡∏á‡∏°‡∏∏‡∏°/‡∏≠‡∏á‡∏®‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡∏ï‡∏≤/‡∏Å‡∏≤‡∏¢: ‡πÉ‡∏ä‡πâ Input ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏° mapping ‡πÉ‡∏ô VTS
            channels = []
            _ax = pick("BodyAngleX", "FaceAngleX", "ParamAngleX", "ParamBodyAngleX")
            _ay = pick("BodyAngleY", "FaceAngleY", "ParamAngleY", "ParamBodyAngleY")
            _az = pick("BodyAngleZ", "FaceAngleZ", "ParamAngleZ", "ParamBodyAngleZ")
            if _ax:
                channels.append({"name": _ax, "amp_env": "VTS_SWAY_PARAMANGLEX_AMPLITUDE", "freq_env": "VTS_SWAY_PARAMANGLEX_FREQUENCY", "amp": 30.0, "freq": 0.5, "phase": 0.0, "limit": (-30.0, 30.0)})
            if _ay:
                channels.append({"name": _ay, "amp_env": "VTS_SWAY_PARAMANGLEY_AMPLITUDE", "freq_env": "VTS_SWAY_PARAMANGLEY_FREQUENCY", "amp": 20.0, "freq": 0.4, "phase": math.pi/2, "limit": (-30.0, 30.0)})
            if _az:
                channels.append({"name": _az, "amp_env": "VTS_SWAY_PARAMANGLEZ_AMPLITUDE", "freq_env": "VTS_SWAY_PARAMANGLEZ_FREQUENCY", "amp": 30.0, "freq": 0.6, "phase": math.pi, "limit": (-30.0, 30.0)})
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤/‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ FacePosition*
            _posx = pick("FacePositionX")
            _posy = pick("FacePositionY")
            if _posx:
                channels.append({"name": _posx, "amp_env": "VTS_SWAY_FACEPOSITIONX_AMPLITUDE", "freq_env": "VTS_SWAY_FACEPOSITIONX_FREQUENCY", "amp": 0.4, "freq": 0.12, "phase": 0.0, "limit": (-1.0, 1.0)})
            if _posy:
                channels.append({"name": _posy, "amp_env": "VTS_SWAY_FACEPOSITIONY_AMPLITUDE", "freq_env": "VTS_SWAY_FACEPOSITIONY_FREQUENCY", "amp": 0.3, "freq": 0.10, "phase": math.pi/2, "limit": (-1.0, 1.0)})
            _step = pick("Step", "ParamStep")
            if _step:
                channels.append({"name": _step, "amp_env": "VTS_SWAY_PARAMSTEP_AMPLITUDE", "freq_env": "VTS_SWAY_PARAMSTEP_FREQUENCY", "amp": 10.0, "freq": 0.5, "phase": 0.0, "limit": (-10.0, 10.0)})
            # ‡∏•‡∏π‡∏Å‡∏ï‡∏≤: ‡∏Ç‡∏±‡∏ö‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            _eyeLX = pick("EyeLeftX", "ParamEyeBallX")
            _eyeRX = pick("EyeRightX", "ParamEyeBallX")
            _eyeLY = pick("EyeLeftY", "ParamEyeBallY")
            _eyeRY = pick("EyeRightY", "ParamEyeBallY")
            for nm, freq, phase in [( _eyeLX, 0.25, 0.0 ), ( _eyeRX, 0.28, math.pi/4 ), ( _eyeLY, 0.30, math.pi/3 ), ( _eyeRY, 0.32, -math.pi/3 )]:
                if nm:
                    channels.append({"name": nm, "amp_env": "VTS_SWAY_EYEBALL_AMPLITUDE", "freq_env": "VTS_SWAY_EYEBALL_FREQUENCY", "amp": 0.7, "freq": freq, "phase": phase, "limit": (-1.0, 1.0)})
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ ENV ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            active = []
            for ch in channels:
                ch["amp"] = float(_os.getenv(ch["amp_env"], str(ch["amp"])) )
                ch["freq"] = float(_os.getenv(ch["freq_env"], str(ch["freq"])) )
                active.append(ch)
            # ‡∏ñ‡πâ‡∏≤ random motion ‡∏Ç‡∏≠‡∏á VTSClient ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏´‡∏±‡∏ß/‡∏ï‡∏±‡∏ß/‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏≠‡∏á‡∏•‡∏π‡∏õ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô
            try:
                if getattr(client, "motion_enabled", False):
                    conflict_names = {
                        "FaceAngleX", "FaceAngleY", "FaceAngleZ",
                        "BodyAngleX", "BodyAngleY", "BodyAngleZ",
                        "FacePositionX", "FacePositionY",
                    }
                    before = ", ".join(ch["name"] for ch in active)
                    active = [ch for ch in active if ch["name"] not in conflict_names]
                    after = ", ".join(ch["name"] for ch in active)
                    if before != after:
                        logger.info("üõ°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô random motion ‡∏≠‡∏¢‡∏π‡πà ‚Äî ‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å: %s", after or "(none)")
            except Exception:
                pass
            # ‡∏´‡∏≤‡∏¢‡πÉ‡∏à: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ Input ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô Breath
            _breath_name = pick("Breath", "ParamBreath")
            breath_enable = bool(_breath_name)
            breath_freq = float(_os.getenv("VTS_BREATH_FREQUENCY", "0.2"))
            breath_amp = float(_os.getenv("VTS_BREATH_AMPLITUDE", "0.4"))  # 0..1
            # ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤: ‡πÉ‡∏ä‡πâ EyeOpenLeft/Right ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö EyeClose* ‡πÄ‡∏õ‡πá‡∏ô fallback
            _eyeL_open = pick("EyeOpenLeft", "ParamEyeLOpen")
            _eyeL_close = pick("EyeCloseLeft", "ParamEyeLClose")
            _eyeR_open = pick("EyeOpenRight", "ParamEyeROpen")
            _eyeR_close = pick("EyeCloseRight", "ParamEyeRClose")
            eyeL_enable = bool(_eyeL_open or _eyeL_close)
            eyeL_freq = float(_os.getenv("VTS_EYE_L_FREQUENCY", "0.25"))
            eyeL_hold_ms = float(_os.getenv("VTS_EYE_L_HOLD_MS", "250"))
            eyeR_enable = bool(_eyeR_open or _eyeR_close)
            eyeR_freq = float(_os.getenv("VTS_EYE_R_FREQUENCY", "0.25"))
            eyeR_hold_ms = float(_os.getenv("VTS_EYE_R_HOLD_MS", "250"))
            eyeL_duty = float(_os.getenv("VTS_EYE_L_DUTY", "0.15"))
            eyeR_duty = float(_os.getenv("VTS_EYE_R_DUTY", "0.15"))
            # ‡∏¢‡∏¥‡πâ‡∏°‡∏ï‡∏≤: ‡πÑ‡∏°‡πà‡∏°‡∏µ default ‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ ‚Äî ‡πÉ‡∏ä‡πâ Param* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            _eyeLS = pick("ParamEyeLSmile")
            _eyeRS = pick("ParamEyeRSmile")
            eyeLS_enable = bool(_eyeLS)
            eyeLS_freq = float(_os.getenv("VTS_EYE_L_SMILE_FREQUENCY", "0.20"))
            eyeLS_amp = float(_os.getenv("VTS_EYE_L_SMILE_AMPLITUDE", "0.6"))
            eyeRS_enable = bool(_eyeRS)
            eyeRS_freq = float(_os.getenv("VTS_EYE_R_SMILE_FREQUENCY", "0.20"))
            eyeRS_amp = float(_os.getenv("VTS_EYE_R_SMILE_AMPLITUDE", "0.6"))
            # ‡∏Ñ‡∏¥‡πâ‡∏ß: ‡πÉ‡∏ä‡πâ BrowLeft*/Right* ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
            _browLY = pick("BrowLeftY", "ParamBrowLY")
            _browRY = pick("BrowRightY", "ParamBrowRY")
            _browLF = pick("BrowLeftForm", "ParamBrowLForm")
            _browRF = pick("BrowRightForm", "ParamBrowRForm")
            browL_enable = bool(_browLY)
            browR_enable = bool(_browRY)
            browLF_enable = bool(_browLF)
            browRF_enable = bool(_browRF)
            brow_freq = float(_os.getenv("VTS_BROW_FREQUENCY", "0.25"))
            brow_amp = float(_os.getenv("VTS_BROW_AMPLITUDE", "0.6"))
            # ‡∏õ‡∏≤‡∏Å: ‡πÉ‡∏ä‡πâ Input ‡∏Å‡πà‡∏≠‡∏ô (MouthX, MouthOpen, MouthSmile)
            _mouthX = pick("MouthX", "ParamMouthX")
            _mouthOpen = pick("MouthOpen", "ParamMouthOpenY")
            _mouthForm = pick("MouthSmile", "ParamMouthForm")
            mouthForm_enable = bool(_mouthForm)
            mouthForm_freq = float(_os.getenv("VTS_MOUTH_FORM_FREQUENCY", "0.20"))
            mouthForm_amp = float(_os.getenv("VTS_MOUTH_FORM_AMPLITUDE", "0.8"))
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏õ‡∏≤‡∏Å‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î idle ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏û‡∏π‡∏î/‡∏≠‡∏µ‡πÇ‡∏°‡∏ó)
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ ENV: VTS_ENABLE_IDLE_MOUTH_OPEN=1
            mouthOpen_enable = bool(_mouthOpen) and os.getenv("VTS_ENABLE_IDLE_MOUTH_OPEN", "0") == "1"
            mouthOpen_freq = float(_os.getenv("VTS_MOUTH_OPEN_FREQUENCY", "0.18"))
            mouthOpen_amp = float(_os.getenv("VTS_MOUTH_OPEN_AMPLITUDE", "0.7"))
            mouthX_enable = bool(_mouthX)
            mouthX_freq = float(_os.getenv("VTS_MOUTH_X_FREQUENCY", "0.35"))
            mouthX_amp = float(_os.getenv("VTS_MOUTH_X_AMPLITUDE", "0.8"))
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ multi-sway ‡∏ó‡∏µ‡πà override ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå (default ‡∏õ‡∏¥‡∏î)
            # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ ENV: VTS_ENABLE_INPUT_LOOP=1
            enable_input_loop = os.getenv("VTS_ENABLE_INPUT_LOOP", "0") == "1"
            if enable_input_loop and (active or breath_enable or eyeL_enable or eyeR_enable or eyeLS_enable or eyeRS_enable or browL_enable or browR_enable or browLF_enable or browRF_enable or mouthForm_enable or mouthOpen_enable or mouthX_enable):
                # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏±‡∏ö‡∏î‡∏π‡∏ä‡πâ‡∏≤‡∏•‡∏á
                tick = 1.0/20.0
                start = _time.perf_counter()

                # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
                names = ", ".join(ch["name"] for ch in active)
                if names:
                    logger.info(f"üåä ‡πÄ‡∏£‡∏¥‡πà‡∏° multi-sway ‡∏ö‡∏ô (Input-first): {names}")
                if breath_enable:
                    logger.info(f"üí® ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ö‡∏ô {_breath_name}")
                if eyeL_enable or eyeR_enable:
                    logger.info("üëÅÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤ EyeOpenLeft/Right ‡∏´‡∏£‡∏∑‡∏≠ ParamEyeL/R")
                if eyeLS_enable or eyeRS_enable:
                    logger.info("üòä ‡πÄ‡∏õ‡∏¥‡∏î‡∏¢‡∏¥‡πâ‡∏°‡∏ï‡∏≤ ParamEyeLSmile/ParamEyeRSmile")
                if browL_enable or browR_enable or browLF_enable or browRF_enable:
                    logger.info("ü™Ñ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏¥‡πâ‡∏ß BrowLeft/RightY, BrowLeft/RightForm")
                if mouthForm_enable or mouthOpen_enable or mouthX_enable:
                    logger.info("üëÑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏≤‡∏Å MouthSmile/Open/X (Input-first)")
                    if not mouthOpen_enable:
                        logger.info("   ‚ö†Ô∏è ‡∏õ‡∏¥‡∏î MouthOpen ‡πÉ‡∏ô idle (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏û‡∏π‡∏î/‡∏≠‡∏µ‡πÇ‡∏°‡∏ó)")

                while True:
                    t = _time.perf_counter() - start
                    try:
                        # ‡∏≠‡∏á‡∏®‡∏≤/‡∏•‡∏π‡∏Å‡∏ï‡∏≤/‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
                        for ch in active:
                            val = ch["amp"] * math.sin(2.0 * math.pi * ch["freq"] * t + ch["phase"]) 
                            lo, hi = ch["limit"]
                            if val < lo: val = lo
                            if val > hi: val = hi
                            await client.set_parameter_value(ch["name"], val)
                        # ‡∏´‡∏≤‡∏¢‡πÉ‡∏à
                        if breath_enable:
                            bval = 0.5 + breath_amp * math.sin(2.0 * math.pi * breath_freq * t)
                            bval = min(1.0, max(0.0, bval))
                            await client.set_parameter_value(_breath_name, bval)
                        # ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡∏ï‡∏≤‡∏ã‡πâ‡∏≤‡∏¢/‡∏Ç‡∏ß‡∏≤: hold ‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö EyeClose* ‡πÄ‡∏õ‡πá‡∏ô fallback
                        if eyeL_enable:
                            periodL = 1.0 / eyeL_freq
                            closed_windowL = min(periodL * 0.9, eyeL_hold_ms / 1000.0)
                            phaseL = t % periodL
                            closedL = phaseL < closed_windowL
                            if _eyeL_open:
                                await client.set_parameter_value(_eyeL_open, 0.0 if closedL else 1.0)
                            elif _eyeL_close:
                                await client.set_parameter_value(_eyeL_close, 1.0 if closedL else 0.0)
                        if eyeR_enable:
                            periodR = 1.0 / eyeR_freq
                            closed_windowR = min(periodR * 0.9, eyeR_hold_ms / 1000.0)
                            phaseR = t % periodR
                            closedR = phaseR < closed_windowR
                            if _eyeR_open:
                                await client.set_parameter_value(_eyeR_open, 0.0 if closedR else 1.0) 
                            elif _eyeR_close:
                                await client.set_parameter_value(_eyeR_close, 1.0 if closedR else 0.0)
                        # ‡∏¢‡∏¥‡πâ‡∏°‡∏ï‡∏≤ (soft pulse)
                        if eyeLS_enable:
                            ls = eyeLS_amp * 0.5 + eyeLS_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * eyeLS_freq * t - math.pi/6))
                            ls = min(1.0, max(0.0, ls))
                            await client.set_parameter_value(_eyeLS, ls)
                        if eyeRS_enable:
                            rs = eyeRS_amp * 0.5 + eyeRS_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * eyeRS_freq * t + math.pi/6))
                            rs = min(1.0, max(0.0, rs))
                            await client.set_parameter_value(_eyeRS, rs)
                        # ‡∏Ñ‡∏¥‡πâ‡∏ß‡∏¢‡∏Å/‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á (‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡∏™‡∏ß‡∏ô‡πÄ‡∏ü‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
                        if browL_enable:
                            bly = brow_amp * 0.5 + brow_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * brow_freq * t))
                            await client.set_parameter_value(_browLY, min(1.0, max(0.0, bly)))
                        if browR_enable:
                            bry = brow_amp * 0.5 + brow_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * brow_freq * t + math.pi/4))
                            await client.set_parameter_value(_browRY, min(1.0, max(0.0, bry)))
                        if browLF_enable:
                            blf = brow_amp * 0.5 + brow_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * brow_freq * t + math.pi/3))
                            await client.set_parameter_value(_browLF, min(1.0, max(0.0, blf)))
                        if browRF_enable:
                            brf = brow_amp * 0.5 + brow_amp * 0.5 * (1.0 + math.sin(2.0 * math.pi * brow_freq * t + 2*math.pi/3))
                            await client.set_parameter_value(_browRF, min(1.0, max(0.0, brf)))
                        # ‡∏õ‡∏≤‡∏Å: ‡∏¢‡∏¥‡πâ‡∏°/‡πÄ‡∏õ‡∏¥‡∏î/‡πÅ‡∏Å‡∏ß‡πà‡∏á X
                        if mouthForm_enable:
                            # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏ô‡∏•‡∏π‡∏õ input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ä‡∏ô‡∏Å‡∏±‡∏ö VTSClient
                            mf = (mouthForm_amp * 0.25) + (mouthForm_amp * 0.25) * (1.0 + math.sin(2.0 * math.pi * mouthForm_freq * 0.6 * t))
                            await client.set_parameter_value(_mouthForm, min(1.0, max(0.0, mf)))
                        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏õ‡∏≤‡∏Å‡πÉ‡∏ô idle ‚Äî ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏û‡∏π‡∏î‡∏ú‡πà‡∏≤‡∏ô VTSClient/lipsync ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        if mouthOpen_enable:
                            mo = 0.5 + mouthOpen_amp * math.sin(2.0 * math.pi * mouthOpen_freq * t)
                            await client.set_parameter_value(_mouthOpen, min(1.0, max(0.0, mo)))
                        if mouthX_enable:
                            mx = mouthX_amp * math.sin(2.0 * math.pi * mouthX_freq * t)
                            await client.set_parameter_value(_mouthX, min(1.0, max(-1.0, mx)))
                    except Exception as e:
                        logger.debug(f"[motion-loop] ignore error: {e}")
                    finally:
                        await asyncio.sleep(tick)
                 # loop ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏á

            else:
                 logger.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡πÅ‡∏ö‡∏ö Input-first ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏¥‡∏î mapping ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ú‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°")
        except Exception:
            pass
        # ‡∏£‡∏≠‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ random motion ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î
        await asyncio.Event().wait()
    except Exception as e:
        logger.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        try:
            await client.stop_random_motion()
        except Exception:
            pass
        await client.disconnect()
        logger.info("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


if __name__ == "__main__":
    asyncio.run(run_vts_demo())