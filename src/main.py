import asyncio
import logging
import os
from pathlib import Path

try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

try:
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏°‡∏î‡∏π‡∏• (python -m src.main) ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
    from adapters.vts.vts_client import VTSClient
except ModuleNotFoundError:
    # ‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ prefix ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à src
    from src.adapters.vts.vts_client import VTSClient
try:
    from core.config import get_settings
except ModuleNotFoundError:
    from src.core.config import get_settings

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)


async def run_vts_demo(duration_sec: float = 25.0):
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ settings ‡∏à‡∏≤‡∏Å .env ‡∏ú‡πà‡∏≤‡∏ô Config ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πÇ‡∏°‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
    settings = get_settings()
    host = settings.VTS_HOST
    port = settings.VTS_PORT
    plugin_name = settings.VTS_PLUGIN_NAME or os.getenv("VTS_PLUGIN_NAME", "AI VTuber Demo")

    client = VTSClient(plugin_name=plugin_name, plugin_developer="VIoneyy", host=host, port=port, config=settings)

    try:
        ok = await client.connect()
        if not ok:
            logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö VTube Studio ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return

        await client.verify_connection()
        logger.info("üéØ ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: %d", len(client.available_parameters))
        logger.info("üéØ ‡∏Æ‡πá‡∏≠‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: %d", len(client.available_hotkeys))

        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ style profile + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πÅ‡∏ô‡πá‡∏õ‡∏ä‡πá‡∏≠‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        try:
            client.apply_style_profile_from_config()
        except Exception:
            pass

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î)
        if getattr(settings, "VTS_RANDOM_EVENTS_CONTINUOUS", False):
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ neuro-random events (continuous, no time limit)")
            await client.start_neuro_random_events()
            # ‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏Å‡∏î‡∏´‡∏¢‡∏∏‡∏î
            run_sec = float(getattr(settings, "VTS_PRESET_DURATION_SEC", 0.0))
            if run_sec <= 0:
                try:
                    # ‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ ‡∏à‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÄ‡∏≠‡∏á
                    while True:
                        await asyncio.sleep(60)
                except asyncio.CancelledError:
                    pass
            else:
                await asyncio.sleep(run_sec)
            await client.stop_neuro_random_events()
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà: ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏•‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
        if getattr(settings, "VTS_RANDOM_EVENTS_PRESET", False):
            # ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å settings ‡∏´‡∏≤‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
            duration_override = float(getattr(settings, "VTS_PRESET_DURATION_SEC", duration_sec)) or duration_sec
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ neuro-random events preset (fixed duration) ~%.1f ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", duration_override)
            await client.play_neuro_random_events(duration_sec=duration_override)
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå: ‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Neuro ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ motion loop
        if getattr(settings, "VTS_SCRIPTED_PRESET", False):
            logger.info("üé¨ ‡πÉ‡∏ä‡πâ scripted Neuro preset (no motion loop) ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ~%.1f ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", duration_sec)
            await client.play_neuro_clip_preset(duration_sec=duration_sec)
            return

        # ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏õ input-first)
        logger.info("üé¨ ‡πÉ‡∏ä‡πâ neuro-random events (default) ‚Äî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏π‡∏õ")
        try:
            await client.start_neuro_random_events()
            # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ VTS_PRESET_DURATION_SEC; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢ ‡πÜ
            run_sec = float(getattr(settings, "VTS_PRESET_DURATION_SEC", 0.0))
            if run_sec > 0:
                await asyncio.sleep(run_sec)
            else:
                await asyncio.Event().wait()
        except Exception:
            pass
    except Exception as e:
        logger.exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        try:
            await client.stop_neuro_random_events()
        except Exception:
            pass
        await client.disconnect()
        logger.info("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


if __name__ == "__main__":
    asyncio.run(run_vts_demo())